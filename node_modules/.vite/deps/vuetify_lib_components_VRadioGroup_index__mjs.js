import {
  VSelectionControl,
  VSelectionControlGroup,
  makeSelectionControlGroupProps
} from "./chunk-6ZNHGGEG.js";
import {
  VInput,
  makeVInputProps
} from "./chunk-T3WVPE6R.js";
import {
  VLabel
} from "./chunk-ICR5QD7Y.js";
import "./chunk-IDISOW4N.js";
import "./chunk-O2CHAP3N.js";
import "./chunk-T34MOI5A.js";
import "./chunk-MSVDCHYY.js";
import "./chunk-Z6FXDGVA.js";
import "./chunk-SA7YY3NW.js";
import {
  IconValue
} from "./chunk-FWIAEJ5I.js";
import "./chunk-KC5UZM74.js";
import {
  useProxiedModel
} from "./chunk-CESRJ53X.js";
import "./chunk-QWJD2HK2.js";
import "./chunk-KGKIRTST.js";
import {
  filterInputAttrs,
  genericComponent,
  getUid,
  omit,
  propsFactory,
  useRender
} from "./chunk-WVVOVPLA.js";
import "./chunk-CZR6YVGI.js";
import {
  Fragment,
  computed,
  createVNode,
  mergeProps
} from "./chunk-VTX76YMH.js";
import "./chunk-ROME4SDB.js";

// node_modules/vuetify/lib/components/VRadioGroup/VRadioGroup.mjs
import "C:/Users/iantonio/Desktop/SGRH - OFFICIAL - PRO/SGRH/node_modules/vuetify/lib/components/VRadioGroup/VRadioGroup.css";
var makeVRadioGroupProps = propsFactory({
  height: {
    type: [Number, String],
    default: "auto"
  },
  ...makeVInputProps(),
  ...omit(makeSelectionControlGroupProps(), ["multiple"]),
  trueIcon: {
    type: IconValue,
    default: "$radioOn"
  },
  falseIcon: {
    type: IconValue,
    default: "$radioOff"
  },
  type: {
    type: String,
    default: "radio"
  }
}, "VRadioGroup");
var VRadioGroup = genericComponent()({
  name: "VRadioGroup",
  inheritAttrs: false,
  props: makeVRadioGroupProps(),
  emits: {
    "update:modelValue": (value) => true
  },
  setup(props, _ref) {
    let {
      attrs,
      slots
    } = _ref;
    const uid = getUid();
    const id = computed(() => props.id || `radio-group-${uid}`);
    const model = useProxiedModel(props, "modelValue");
    useRender(() => {
      const [rootAttrs, controlAttrs] = filterInputAttrs(attrs);
      const inputProps = VInput.filterProps(props);
      const controlProps = VSelectionControl.filterProps(props);
      const label = slots.label ? slots.label({
        label: props.label,
        props: {
          for: id.value
        }
      }) : props.label;
      return createVNode(VInput, mergeProps({
        "class": ["v-radio-group", props.class],
        "style": props.style
      }, rootAttrs, inputProps, {
        "modelValue": model.value,
        "onUpdate:modelValue": ($event) => model.value = $event,
        "id": id.value
      }), {
        ...slots,
        default: (_ref2) => {
          let {
            id: id2,
            messagesId,
            isDisabled,
            isReadonly
          } = _ref2;
          return createVNode(Fragment, null, [label && createVNode(VLabel, {
            "id": id2.value
          }, {
            default: () => [label]
          }), createVNode(VSelectionControlGroup, mergeProps(controlProps, {
            "id": id2.value,
            "aria-describedby": messagesId.value,
            "defaultsTarget": "VRadio",
            "trueIcon": props.trueIcon,
            "falseIcon": props.falseIcon,
            "type": props.type,
            "disabled": isDisabled.value,
            "readonly": isReadonly.value,
            "aria-labelledby": label ? id2.value : void 0,
            "multiple": false
          }, controlAttrs, {
            "modelValue": model.value,
            "onUpdate:modelValue": ($event) => model.value = $event
          }), slots)]);
        }
      });
    });
    return {};
  }
});
export {
  VRadioGroup
};
//# sourceMappingURL=vuetify_lib_components_VRadioGroup_index__mjs.js.map
