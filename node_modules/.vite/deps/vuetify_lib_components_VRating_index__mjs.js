import "./chunk-2PSEIA2V.js";
import {
  VBtn
<<<<<<< HEAD
} from "./chunk-LROS4ONL.js";
import "./chunk-RVI4WC2M.js";
import "./chunk-UWMUNB35.js";
import "./chunk-QW7WY6DH.js";
import "./chunk-5VBUXWU4.js";
import "./chunk-RG4S2HJS.js";
import "./chunk-PT2W5QDK.js";
import "./chunk-LKRXE5VQ.js";
import "./chunk-6AS44ZZG.js";
import "./chunk-S74KDYA3.js";
import "./chunk-KYHNSVAY.js";
import "./chunk-2HNHGKAS.js";
import "./chunk-WOZJWL2Y.js";
import "./chunk-3BWMXXYC.js";
import {
  useLocale
} from "./chunk-G3QPWYCR.js";
import {
  makeDensityProps
} from "./chunk-KEBZFMKU.js";
import "./chunk-KWGMHPKM.js";
import {
  makeSizeProps
} from "./chunk-PW7THPPG.js";
import {
  makeTagProps
} from "./chunk-TE4NDXZZ.js";
import {
  IconValue
} from "./chunk-WJOKMSG4.js";
import "./chunk-LA2REBWS.js";
import {
  makeThemeProps,
  provideTheme
} from "./chunk-FDVFQYNM.js";
import {
  useProxiedModel
} from "./chunk-ICOZLUPR.js";
=======
} from "./chunk-IHORO3DV.js";
import "./chunk-WUMYJOPM.js";
import "./chunk-PRMAE6YC.js";
import "./chunk-YMOCDP3Q.js";
import "./chunk-QEV4TKNM.js";
import "./chunk-MEPOBCBN.js";
import "./chunk-STH46RDX.js";
import "./chunk-ROV5RWRC.js";
import "./chunk-YRKFTNP4.js";
import "./chunk-CPKBJ5EY.js";
import "./chunk-EDYAMR53.js";
import "./chunk-ORPNVSXP.js";
import "./chunk-JSOCWLLP.js";
import {
  useLocale
} from "./chunk-75DAIOP4.js";
import {
  useProxiedModel
} from "./chunk-7QRGARTL.js";
import "./chunk-HMQ2S4WF.js";
import "./chunk-NH5Q4DK2.js";
import "./chunk-7NQ2S3H7.js";
import {
  makeDensityProps
} from "./chunk-DIXBKLZY.js";
import {
  makeSizeProps
} from "./chunk-23IKESU4.js";
import {
  makeTagProps
} from "./chunk-T2JVGGTS.js";
import "./chunk-UYYIHT7N.js";
import {
  IconValue
} from "./chunk-HXGVRDST.js";
import {
  makeThemeProps,
  provideTheme
} from "./chunk-C45R2IME.js";
>>>>>>> ccc65404a54a6455d2236d9322e02ed1a537df07
import {
  clamp,
  createRange,
  genericComponent,
  getUid,
  makeComponentProps,
  propsFactory,
  useRender
<<<<<<< HEAD
} from "./chunk-22DMSGA3.js";
=======
} from "./chunk-BV4GJT76.js";
>>>>>>> ccc65404a54a6455d2236d9322e02ed1a537df07
import "./chunk-E5MAENA3.js";
import {
  Fragment,
  computed,
  createTextVNode,
  createVNode,
  mergeProps,
  shallowRef
} from "./chunk-7INRURLR.js";
import "./chunk-ROME4SDB.js";

// node_modules/vuetify/lib/components/VRating/VRating.mjs
import "C:/Users/iantonio/Music/SGRH/SGRH/node_modules/vuetify/lib/components/VRating/VRating.css";
var makeVRatingProps = propsFactory({
  name: String,
  itemAriaLabel: {
    type: String,
    default: "$vuetify.rating.ariaLabel.item"
  },
  activeColor: String,
  color: String,
  clearable: Boolean,
  disabled: Boolean,
  emptyIcon: {
    type: IconValue,
    default: "$ratingEmpty"
  },
  fullIcon: {
    type: IconValue,
    default: "$ratingFull"
  },
  halfIncrements: Boolean,
  hover: Boolean,
  length: {
    type: [Number, String],
    default: 5
  },
  readonly: Boolean,
  modelValue: {
    type: [Number, String],
    default: 0
  },
  itemLabels: Array,
  itemLabelPosition: {
    type: String,
    default: "top",
    validator: (v) => ["top", "bottom"].includes(v)
  },
  ripple: Boolean,
  ...makeComponentProps(),
  ...makeDensityProps(),
  ...makeSizeProps(),
  ...makeTagProps(),
  ...makeThemeProps()
}, "VRating");
var VRating = genericComponent()({
  name: "VRating",
  props: makeVRatingProps(),
  emits: {
    "update:modelValue": (value) => true
  },
  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const {
      t
    } = useLocale();
    const {
      themeClasses
    } = provideTheme(props);
    const rating = useProxiedModel(props, "modelValue");
    const normalizedValue = computed(() => clamp(parseFloat(rating.value), 0, +props.length));
    const range = computed(() => createRange(Number(props.length), 1));
    const increments = computed(() => range.value.flatMap((v) => props.halfIncrements ? [v - 0.5, v] : [v]));
    const hoverIndex = shallowRef(-1);
    const itemState = computed(() => increments.value.map((value) => {
      const isHovering = props.hover && hoverIndex.value > -1;
      const isFilled = normalizedValue.value >= value;
      const isHovered = hoverIndex.value >= value;
      const isFullIcon = isHovering ? isHovered : isFilled;
      const icon = isFullIcon ? props.fullIcon : props.emptyIcon;
      const activeColor = props.activeColor ?? props.color;
      const color = isFilled || isHovered ? activeColor : props.color;
      return {
        isFilled,
        isHovered,
        icon,
        color
      };
    }));
    const eventState = computed(() => [0, ...increments.value].map((value) => {
      function onMouseenter() {
        hoverIndex.value = value;
      }
      function onMouseleave() {
        hoverIndex.value = -1;
      }
      function onClick() {
        if (props.disabled || props.readonly)
          return;
        rating.value = normalizedValue.value === value && props.clearable ? 0 : value;
      }
      return {
        onMouseenter: props.hover ? onMouseenter : void 0,
        onMouseleave: props.hover ? onMouseleave : void 0,
        onClick
      };
    }));
    const name = computed(() => props.name ?? `v-rating-${getUid()}`);
    function VRatingItem(_ref2) {
      var _a, _b;
      let {
        value,
        index,
        showStar = true
      } = _ref2;
      const {
        onMouseenter,
        onMouseleave,
        onClick
      } = eventState.value[index + 1];
      const id = `${name.value}-${String(value).replace(".", "-")}`;
      const btnProps = {
        color: (_a = itemState.value[index]) == null ? void 0 : _a.color,
        density: props.density,
        disabled: props.disabled,
        icon: (_b = itemState.value[index]) == null ? void 0 : _b.icon,
        ripple: props.ripple,
        size: props.size,
        variant: "plain"
      };
      return createVNode(Fragment, null, [createVNode("label", {
        "for": id,
        "class": {
          "v-rating__item--half": props.halfIncrements && value % 1 > 0,
          "v-rating__item--full": props.halfIncrements && value % 1 === 0
        },
        "onMouseenter": onMouseenter,
        "onMouseleave": onMouseleave,
        "onClick": onClick
      }, [createVNode("span", {
        "class": "v-rating__hidden"
      }, [t(props.itemAriaLabel, value, props.length)]), !showStar ? void 0 : slots.item ? slots.item({
        ...itemState.value[index],
        props: btnProps,
        value,
        index,
        rating: normalizedValue.value
      }) : createVNode(VBtn, mergeProps({
        "aria-label": t(props.itemAriaLabel, value, props.length)
      }, btnProps), null)]), createVNode("input", {
        "class": "v-rating__hidden",
        "name": name.value,
        "id": id,
        "type": "radio",
        "value": value,
        "checked": normalizedValue.value === value,
        "tabindex": -1,
        "readonly": props.readonly,
        "disabled": props.disabled
      }, null)]);
    }
    function createLabel(labelProps) {
      if (slots["item-label"])
        return slots["item-label"](labelProps);
      if (labelProps.label)
        return createVNode("span", null, [labelProps.label]);
      return createVNode("span", null, [createTextVNode("Â ")]);
    }
    useRender(() => {
      var _a;
      const hasLabels = !!((_a = props.itemLabels) == null ? void 0 : _a.length) || slots["item-label"];
      return createVNode(props.tag, {
        "class": ["v-rating", {
          "v-rating--hover": props.hover,
          "v-rating--readonly": props.readonly
        }, themeClasses.value, props.class],
        "style": props.style
      }, {
        default: () => [createVNode(VRatingItem, {
          "value": 0,
          "index": -1,
          "showStar": false
        }, null), range.value.map((value, i) => {
          var _a2, _b;
          return createVNode("div", {
            "class": "v-rating__wrapper"
          }, [hasLabels && props.itemLabelPosition === "top" ? createLabel({
            value,
            index: i,
            label: (_a2 = props.itemLabels) == null ? void 0 : _a2[i]
          }) : void 0, createVNode("div", {
            "class": "v-rating__item"
          }, [props.halfIncrements ? createVNode(Fragment, null, [createVNode(VRatingItem, {
            "value": value - 0.5,
            "index": i * 2
          }, null), createVNode(VRatingItem, {
            "value": value,
            "index": i * 2 + 1
          }, null)]) : createVNode(VRatingItem, {
            "value": value,
            "index": i
          }, null)]), hasLabels && props.itemLabelPosition === "bottom" ? createLabel({
            value,
            index: i,
            label: (_b = props.itemLabels) == null ? void 0 : _b[i]
          }) : void 0]);
        })]
      });
    });
    return {};
  }
});
export {
  VRating
};
//# sourceMappingURL=vuetify_lib_components_VRating_index__mjs.js.map
