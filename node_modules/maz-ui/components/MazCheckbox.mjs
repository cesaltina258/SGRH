import "./assets/MazCheckbox.css";
import { computed as r, openBlock as b, createElementBlock as x, createElementVNode as u, defineComponent as w, useCssVars as C, getCurrentInstance as _, unref as d, normalizeClass as p, normalizeStyle as I, mergeProps as A, createVNode as B, renderSlot as N } from "vue";
const $ = ({
  componentName: o,
  instance: a,
  providedId: n
}) => r(() => n ?? `${o}-${a == null ? void 0 : a.uid}`), j = {
  xmlns: "http://www.w3.org/2000/svg",
  width: "1em",
  height: "1em",
  fill: "none",
  viewBox: "0 0 24 24"
}, M = /* @__PURE__ */ u(
  "path",
  {
    stroke: "currentColor",
    "stroke-linecap": "round",
    "stroke-linejoin": "round",
    "stroke-width": "1.5",
    d: "m4.5 12.75 6 6 9-13.5"
  },
  null,
  -1
  /* HOISTED */
), O = [
  M
];
function E(o, a) {
  return b(), x("svg", j, [...O]);
}
const q = { render: E }, D = ["for", "aria-checked"], H = ["id", "checked", "disabled", "name"], K = /* @__PURE__ */ w({
  inheritAttrs: !1,
  __name: "MazCheckbox",
  props: {
    style: {
      type: [String, Array, Object],
      default: void 0
    },
    class: {
      type: [String, Array, Object],
      default: void 0
    },
    modelValue: {
      type: [Boolean, Array],
      default: void 0
    },
    id: { type: String, default: void 0 },
    color: {
      type: String,
      default: "primary"
    },
    value: { type: [String, Number, Boolean], default: void 0 },
    name: { type: String, default: "m-checkbox" },
    size: { type: String, default: "md" },
    disabled: { type: Boolean, default: !1 }
  },
  emits: [
    /* emitted when value change */
    "update:model-value",
    /* emited when value change */
    "change"
  ],
  setup(o, { emit: a }) {
    C((t) => ({
      "3a21591b": v.value,
      "4953c77d": y.value,
      d5250ce8: g.value,
      "105d84cf": z.value
    }));
    const n = _(), e = o, c = a, i = $({
      componentName: "MazCheckbox",
      instance: n,
      providedId: e.id
    }), m = r(
      () => typeof e.value != "boolean" && Array.isArray(e.modelValue) ? e.modelValue.includes(e.value) : typeof e.modelValue == "boolean" ? e.modelValue : !1
    ), y = r(() => {
      switch (e.size) {
        case "xl":
          return "2.25rem";
        case "lg":
          return "2rem";
        default:
          return "1.625rem";
        case "sm":
          return "1.425rem";
        case "xs":
          return "1.325rem";
        case "mini":
          return "1.2rem";
      }
    }), k = r(() => {
      switch (e.size) {
        case "xl":
          return "maz-text-2xl";
        case "lg":
          return "maz-text-xl";
        default:
          return "maz-text-lg";
        case "sm":
          return "maz-text-base";
        case "xs":
          return "maz-text-sm";
        case "mini":
          return "maz-text-xs";
      }
    }), v = r(() => `var(--maz-color-${e.color}-contrast)`), g = r(() => `var(--maz-color-${e.color})`), z = r(
      () => ["black", "transparent"].includes(e.color) ? "var(--maz-color-muted)" : `var(--maz-color-${e.color}-alpha)`
    );
    function V(t) {
      ["Space"].includes(t.code) && (t.preventDefault(), f(e.value ?? !e.modelValue));
    }
    function S(t) {
      return typeof t == "boolean" && (typeof e.modelValue == "boolean" || e.modelValue === void 0 || e.modelValue === null) ? !e.modelValue : Array.isArray(e.modelValue) && typeof t != "boolean" ? e.modelValue.includes(t) ? e.modelValue.filter((l) => l !== t) : [...e.modelValue, t] : [t];
    }
    function f(t) {
      const l = S(t);
      c("update:model-value", l), c("change", l);
    }
    return (t, l) => (b(), x("label", {
      for: d(i),
      class: p(["m-checkbox", [{ "--disabled": o.disabled }, e.class]]),
      tabindex: "0",
      style: I(o.style),
      role: "checkbox",
      "aria-checked": m.value,
      onKeydown: V
    }, [
      u("input", A({
        id: d(i),
        checked: m.value
      }, t.$attrs, {
        tabindex: "-1",
        disabled: o.disabled,
        name: o.name,
        type: "checkbox",
        onChange: l[0] || (l[0] = (s) => {
          var h;
          return f(o.value ?? ((h = s == null ? void 0 : s.target) == null ? void 0 : h.checked));
        })
      }), null, 16, H),
      u("span", null, [
        B(d(q), {
          class: p(["check-icon", k.value])
        }, null, 8, ["class"])
      ]),
      N(t.$slots, "default", {}, void 0, !0)
    ], 46, D));
  }
}), P = (o, a) => {
  const n = o.__vccOpts || o;
  for (const [e, c] of a)
    n[e] = c;
  return n;
}, G = /* @__PURE__ */ P(K, [["__scopeId", "data-v-05f6558f"]]);
export {
  G as default
};
