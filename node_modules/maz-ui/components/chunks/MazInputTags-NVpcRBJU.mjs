import "../assets/MazInputTags.css";
import { computed as o, defineComponent as L, defineAsyncComponent as S, ref as M, getCurrentInstance as ae, onMounted as le, useSlots as E, openBlock as r, createElementBlock as y, normalizeClass as z, normalizeStyle as F, createElementVNode as A, renderSlot as I, createVNode as k, unref as m, createCommentVNode as d, withDirectives as ne, mergeProps as R, toHandlers as oe, vModelDynamic as re, createTextVNode as U, toDisplayString as J, createBlock as B, withModifiers as K, withCtx as V, useAttrs as ie, onBeforeMount as ue, resolveDynamicComponent as se, TransitionGroup as de, Fragment as ce, renderList as fe, withKeys as q } from "vue";
function me(e, c) {
  let a;
  return function(...v) {
    clearTimeout(a), a = setTimeout(() => {
      e.apply(this, v);
    }, c);
  };
}
const ve = ({
  componentName: e,
  instance: c,
  providedId: a
}) => o(() => a ?? `${e}-${c == null ? void 0 : c.uid}`), ye = {
  key: 0,
  class: "m-input-wrapper-left"
}, be = { class: "m-input-wrapper-input" }, ge = ["id", "type", "name", "placeholder", "aria-label", "disabled", "readonly", "required"], pe = { key: 0 }, ze = {
  key: 1,
  class: "m-input-wrapper-right"
}, he = /* @__PURE__ */ L({
  inheritAttrs: !1,
  __name: "MazInput",
  props: {
    style: {
      type: [String, Array, Object],
      default: void 0
    },
    class: {
      type: [String, Array, Object],
      default: void 0
    },
    modelValue: {
      type: [String, Number, Boolean],
      default: void 0
    },
    placeholder: { type: String, default: void 0 },
    color: {
      type: String,
      default: "primary"
    },
    label: { type: String, default: void 0 },
    name: { type: String, default: "input" },
    type: {
      type: String,
      default: "text",
      validator: (e) => [
        "text",
        "date",
        "number",
        "tel",
        "search",
        "url",
        "password",
        "month",
        "time",
        "week",
        "email"
      ].includes(e)
    },
    required: { type: Boolean, default: !1 },
    disabled: { type: Boolean, default: !1 },
    readonly: { type: Boolean, default: !1 },
    id: { type: String, default: void 0 },
    error: { type: Boolean, default: !1 },
    success: { type: Boolean, default: !1 },
    warning: { type: Boolean, default: !1 },
    hint: { type: String, default: void 0 },
    inputClasses: { type: String, default: void 0 },
    noBorder: { type: Boolean, default: !1 },
    noRadius: { type: Boolean, default: !1 },
    size: {
      type: String,
      default: "md",
      validator: (e) => ["mini", "xs", "sm", "md", "lg", "xl"].includes(e)
    },
    debounce: { type: Boolean, default: !1 },
    debounceDelay: { type: Number, default: 500 },
    validButton: { type: Boolean, default: !1 },
    validButtonLoading: { type: Boolean, default: !1 },
    autoFocus: { type: Boolean, default: !1 },
    borderActive: { type: Boolean, default: !1 },
    leftIcon: { type: String, default: void 0 },
    rightIcon: { type: String, default: void 0 }
  },
  emits: ["focus", "blur", "update:model-value", "click", "change", "update"],
  setup(e, { emit: c }) {
    const a = S(() => Promise.resolve().then(() => we)), v = S(() => import("./MazIcon-RrJDzX3V.mjs")), f = S(() => import("./eye-slash-UoWe3WK1.mjs")), h = S(() => import("./eye-3jm1b22X.mjs")), n = S(() => import("./check-JxWJRZYz.mjs")), t = e, p = c, b = M(!1), u = M(!1), i = M(), s = ae(), w = ve({
      componentName: "MazInput",
      instance: s,
      providedId: t.id
    });
    le(() => {
      var l;
      t.autoFocus && ((l = i.value) == null || l.focus());
    });
    const x = o(() => t.type === "password"), O = o(() => b.value ? "text" : t.type), N = o(() => {
      if (!t.noBorder) {
        if (t.error)
          return "maz-border-danger";
        if (t.success)
          return "maz-border-success";
        if (t.warning)
          return "maz-border-warning";
        if (u.value || t.borderActive) {
          if (t.color === "black")
            return "maz-border-black";
          if (t.color === "danger")
            return "maz-border-danger";
          if (t.color === "info")
            return "maz-border-info";
          if (t.color === "primary")
            return "maz-border-primary";
          if (t.color === "secondary")
            return "maz-border-secondary";
          if (t.color === "success")
            return "maz-border-success";
          if (t.color === "warning")
            return "maz-border-warning";
          if (t.color === "white")
            return "maz-border-white";
        }
        return "--default-border";
      }
    }), C = E(), $ = o(() => {
      const { required: l, placeholder: g } = t;
      if (g)
        return l ? `${g} *` : g;
    }), D = o(() => t.modelValue !== void 0 && t.modelValue !== ""), j = o({
      get: () => t.modelValue,
      set: (l) => te(l)
    }), H = o(() => (!!t.label || !!t.hint) && (u.value || !!D.value || !!t.placeholder || ["date", "month", "week"].includes(t.type))), X = o(() => !!t.label || !!t.hint), Q = () => !!C["right-icon"] || x.value || !!C["valid-button"] || t.validButton || !!t.rightIcon, W = () => !!C["left-icon"] || !!t.leftIcon, Y = (l) => {
      p("focus", l), u.value = !0;
    }, Z = (l) => {
      p("blur", l), u.value = !1;
    }, _ = (l) => p("change", l), ee = me((l) => {
      p("update:model-value", l);
    }, t.debounceDelay), te = (l) => {
      if (t.debounce)
        return ee(l);
      p("update:model-value", l);
    };
    return (l, g) => (r(), y(
      "div",
      {
        class: z(["m-input", [
          {
            "--is-focused": u.value || e.borderActive,
            "--should-up": H.value,
            "--has-label": X.value,
            "--is-disabled": e.disabled,
            "--is-readonly": e.readonly,
            "--has-z-2": e.error || e.warning || e.success,
            "--has-state": e.error || e.warning || e.success
          },
          t.class,
          `--${e.color}`,
          `--${e.size}`
        ]]),
        style: F(e.style)
      },
      [
        A(
          "div",
          {
            class: z(["m-input-wrapper", [e.inputClasses, N.value, { "maz-rounded": !e.noRadius }]])
          },
          [
            W() ? (r(), y("div", ye, [
              l.$slots["left-icon"] || e.leftIcon ? I(l.$slots, "left-icon", { key: 0 }, () => [
                k(m(v), {
                  name: e.leftIcon,
                  class: "maz-text-xl maz-text-muted"
                }, null, 8, ["name"])
              ], !0) : d("v-if", !0)
            ])) : d("v-if", !0),
            A("div", be, [
              ne(A("input", R({
                id: m(w),
                ref_key: "input",
                ref: i,
                "onUpdate:modelValue": g[0] || (g[0] = (T) => j.value = T),
                type: O.value,
                name: e.name
              }, l.$attrs, {
                placeholder: $.value,
                "aria-label": e.label || e.placeholder,
                disabled: e.disabled,
                readonly: e.readonly,
                required: e.required,
                class: "m-input-input"
              }, oe({
                blur: Z,
                focus: Y,
                change: _
              }, !0), {
                onClick: g[1] || (g[1] = (T) => l.$emit("click", T))
              }), null, 16, ge), [
                [re, j.value]
              ]),
              e.label || e.hint ? (r(), y(
                "span",
                {
                  key: 0,
                  ref: "label",
                  class: z(["m-input-label", [
                    {
                      "maz-text-danger-600": e.error,
                      "maz-text-success-600": e.success,
                      "maz-text-warning-600": e.warning
                    }
                  ]])
                },
                [
                  U(
                    J(e.hint || e.label) + " ",
                    1
                    /* TEXT */
                  ),
                  e.required ? (r(), y("sup", pe, "*")) : d("v-if", !0)
                ],
                2
                /* CLASS */
              )) : d("v-if", !0)
            ]),
            Q() ? (r(), y("div", ze, [
              l.$slots["right-icon"] || e.rightIcon ? I(l.$slots, "right-icon", { key: 0 }, () => [
                k(m(v), {
                  name: e.rightIcon,
                  class: "maz-text-xl maz-text-muted"
                }, null, 8, ["name"])
              ], !0) : d("v-if", !0),
              x.value ? (r(), B(m(a), {
                key: 1,
                color: "transparent",
                tabindex: "-1",
                size: "mini",
                onClick: g[2] || (g[2] = K((T) => b.value = !b.value, ["stop"]))
              }, {
                default: V(() => [
                  b.value ? (r(), B(m(f), {
                    key: 0,
                    class: "maz-text-xl maz-text-muted"
                  })) : (r(), B(m(h), {
                    key: 1,
                    class: "maz-text-xl maz-text-muted"
                  }))
                ]),
                _: 1
                /* STABLE */
              })) : d("v-if", !0),
              l.$slots["valid-button"] || e.validButton ? I(l.$slots, "valid-button", { key: 2 }, () => [
                k(m(a), {
                  color: "transparent",
                  disabled: e.disabled,
                  tabindex: "-1",
                  loading: e.validButtonLoading,
                  class: "m-input-valid-button",
                  size: "mini",
                  type: "submit"
                }, {
                  default: V(() => [
                    k(m(n), { class: "maz-text-2xl maz-text-normal" })
                  ]),
                  _: 1
                  /* STABLE */
                }, 8, ["disabled", "loading"])
              ], !0) : d("v-if", !0)
            ])) : d("v-if", !0)
          ],
          2
          /* CLASS */
        )
      ],
      6
      /* CLASS, STYLE */
    ));
  }
}), P = (e, c) => {
  const a = e.__vccOpts || e;
  for (const [v, f] of c)
    a[v] = f;
  return a;
}, Be = /* @__PURE__ */ P(he, [["__scopeId", "data-v-acaa27d2"]]), ke = /* @__PURE__ */ L({
  __name: "MazBtn",
  props: {
    variant: {
      type: String,
      default: "button",
      validator: (e) => ["button", "link"].includes(e)
    },
    size: {
      type: String,
      default: "md",
      validator: (e) => ["mini", "xs", "sm", "md", "lg", "xl"].includes(e)
    },
    color: {
      type: String,
      default: "primary"
    },
    type: {
      type: String,
      default: "button",
      validator: (e) => ["button", "submit", "reset"].includes(e)
    },
    rounded: { type: Boolean, default: !1 },
    noRounded: { type: Boolean, default: !1 },
    outline: { type: Boolean, default: !1 },
    pastel: { type: Boolean, default: !1 },
    block: { type: Boolean, default: !1 },
    noUnderline: { type: Boolean, default: !1 },
    noLeading: { type: Boolean, default: !1 },
    loading: { type: Boolean, default: !1 },
    disabled: { type: Boolean, default: !1 },
    fab: { type: Boolean, default: !1 },
    icon: { type: String, default: void 0 },
    leftIcon: { type: String, default: void 0 },
    rightIcon: { type: String, default: void 0 },
    noPadding: { type: Boolean, default: !1 },
    noElevation: { type: Boolean, default: !1 }
  },
  setup(e) {
    const c = S(() => import("./MazSpinner-4_WO_1Z6.mjs")), a = S(() => import("./MazIcon-RrJDzX3V.mjs")), { href: v, to: f } = ie(), h = E(), n = e;
    ue(() => {
      n.icon && !n.fab && console.error('[maz-ui](MazBtn) the prop "icon" must be used only with "fab" props');
    });
    const t = o(() => v ? "a" : f ? "router-link" : "button"), p = o(
      () => n.pastel ? `--${n.color}-pastel` : n.outline ? `--${n.color}-outline` : `--${n.color}`
    ), b = o(
      () => (n.loading || n.disabled) && t.value === "button"
    ), u = o(() => b.value ? "--cursor-default" : "--cursor-pointer"), i = o(() => `--is-${n.variant}`), s = o(() => n.loading && n.variant === "button"), w = o(() => !!h["left-icon"] || n.leftIcon), x = o(() => !!h["right-icon"] || n.rightIcon), O = o(() => w.value || x.value), N = o(() => n.fab && n.icon), C = o(() => t.value === "button" ? n.type : void 0);
    return ($, D) => (r(), B(se(t.value), {
      disabled: b.value,
      class: z(["m-btn", [
        `--${e.size}`,
        p.value,
        u.value,
        i.value,
        {
          "--block": e.block,
          "--no-underline": e.noUnderline,
          "--no-leading": e.noLeading,
          "--fab": e.fab,
          "--loading": e.loading,
          "--disabled": b.value,
          "--icon": O.value,
          "--rounded": e.rounded,
          "--no-rounded": e.noRounded,
          "--no-padding": e.noPadding,
          "--no-elevation": e.noElevation
        }
      ]]),
      type: C.value
    }, {
      default: V(() => [
        w.value ? (r(), y(
          "div",
          {
            key: 0,
            class: z(["m-btn__icon-left maz-flex maz-flex-center", { "maz-invisible": s.value }])
          },
          [
            I($.$slots, "left-icon", {}, () => [
              e.leftIcon ? (r(), B(m(a), {
                key: 0,
                name: e.leftIcon
              }, null, 8, ["name"])) : d("v-if", !0)
            ], !0)
          ],
          2
          /* CLASS */
        )) : d("v-if", !0),
        N.value ? (r(), y(
          "div",
          {
            key: 1,
            class: z(["m-btn__icon maz-flex maz-flex-center", { "maz-invisible": s.value }])
          },
          [
            I($.$slots, "icon", {}, () => [
              e.icon ? (r(), B(m(a), {
                key: 0,
                name: e.icon
              }, null, 8, ["name"])) : d("v-if", !0)
            ], !0)
          ],
          2
          /* CLASS */
        )) : d("v-if", !0),
        A(
          "span",
          {
            class: z(["maz-flex maz-flex-center", { "maz-invisible": s.value }])
          },
          [
            I($.$slots, "default", {}, void 0, !0)
          ],
          2
          /* CLASS */
        ),
        x.value ? (r(), y(
          "div",
          {
            key: 2,
            class: z(["m-btn__icon-right maz-flex maz-flex-center", { "maz-invisible": s.value }])
          },
          [
            I($.$slots, "right-icon", {}, () => [
              e.rightIcon ? (r(), B(m(a), {
                key: 0,
                name: e.rightIcon
              }, null, 8, ["name"])) : d("v-if", !0)
            ], !0)
          ],
          2
          /* CLASS */
        )) : d("v-if", !0),
        s.value ? (r(), B(m(c), {
          key: 3,
          size: "2em",
          color: e.color,
          class: "maz-absolute"
        }, null, 8, ["color"])) : d("v-if", !0)
      ]),
      _: 3
      /* FORWARDED */
    }, 8, ["disabled", "class", "type"]));
  }
}), G = /* @__PURE__ */ P(ke, [["__scopeId", "data-v-3f2db58e"]]), we = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: G
}, Symbol.toStringTag, { value: "Module" })), Se = {
  xmlns: "http://www.w3.org/2000/svg",
  width: "1em",
  height: "1em",
  fill: "none",
  viewBox: "0 0 24 24"
}, Ie = /* @__PURE__ */ A(
  "path",
  {
    stroke: "currentColor",
    "stroke-linecap": "round",
    "stroke-linejoin": "round",
    "stroke-width": "1.5",
    d: "M6 18 18 6M6 6l12 12"
  },
  null,
  -1
  /* HOISTED */
), xe = [
  Ie
];
function $e(e, c) {
  return r(), y("svg", Se, [...xe]);
}
const Ve = { render: $e }, Ce = /* @__PURE__ */ L({
  inheritAttrs: !1,
  __name: "MazInputTags",
  props: {
    style: {
      type: [String, Array, Object],
      default: void 0
    },
    class: {
      type: [String, Array, Object],
      default: void 0
    },
    /** Input value, can be a `Array` of `String` or `null` */
    modelValue: {
      type: Array,
      default: void 0
    },
    /** input placeholder */
    placeholder: { type: String, default: void 0 },
    label: { type: String, default: void 0 },
    /** When is `true` the input is disable */
    disabled: { type: Boolean, default: !1 },
    /** When is `true` the input has the error style (danger color) */
    error: { type: Boolean, default: !1 },
    /** When is `true` the input has the success style (success color) */
    success: { type: Boolean, default: !1 },
    /** When is `true` the input has the warning style (warning color) */
    warning: { type: Boolean, default: !1 },
    size: {
      type: String,
      default: "md",
      validator: (e) => ["mini", "xs", "sm", "md", "lg", "xl"].includes(e)
    },
    /** Color of component */
    color: {
      type: String,
      default: "primary"
    }
  },
  emits: ["update:model-value"],
  setup(e, { emit: c }) {
    const a = e, v = M(!1), f = M(), h = c, n = (u) => {
      if (f.value) {
        u.preventDefault();
        const i = f.value.trim().split(",").map((s) => s.trim() === "," ? void 0 : s.trim()).filter(Boolean);
        h("update:model-value", a.modelValue ? [...a.modelValue, ...i] : [...i]), f.value = void 0;
      }
    }, t = o(() => {
      if (a.error)
        return "maz-border-danger";
      if (a.success)
        return "maz-border-success";
      if (a.warning)
        return "maz-border-warning";
      if (v.value) {
        if (a.color === "primary")
          return "maz-border-primary";
        if (a.color === "secondary")
          return "maz-border-secondary";
        if (a.color === "info")
          return "maz-border-info";
        if (a.color === "danger")
          return "maz-border-danger";
        if (a.color === "success")
          return "maz-border-success";
        if (a.color === "warning")
          return "maz-border-warning";
        if (a.color === "black")
          return "maz-border-black";
        if (a.color === "white")
          return "maz-border-white";
      }
      return "maz-border-gray-200 dark:maz-border-color-lighter";
    }), p = () => {
      if (!f.value || f.value === "") {
        const u = JSON.parse(JSON.stringify(a.modelValue));
        u.pop(), h("update:model-value", u);
      }
    }, b = (u) => {
      const i = JSON.parse(JSON.stringify(a.modelValue));
      i.splice(u, 1), h("update:model-value", i);
    };
    return (u, i) => (r(), y(
      "div",
      {
        class: z(["m-input-tags", [t.value, `--${e.color}`, a.class]]),
        style: F(e.style),
        onFocusCapture: i[1] || (i[1] = (s) => v.value = !0),
        onBlurCapture: i[2] || (i[2] = (s) => v.value = !1)
      },
      [
        k(de, { name: "maz-tags" }, {
          default: V(() => [
            (r(!0), y(
              ce,
              null,
              fe(e.modelValue, (s, w) => (r(), y("div", {
                key: `tag-${w}`
              }, [
                k(G, {
                  class: "m-input-tags__tag",
                  disabled: e.disabled,
                  size: e.size,
                  color: e.color,
                  onClick: K((x) => b(w), ["stop"])
                }, {
                  default: V(() => [
                    U(
                      J(s),
                      1
                      /* TEXT */
                    )
                  ]),
                  "right-icon": V(() => [
                    k(m(Ve), { class: "m-input-tags__tag__icon" })
                  ]),
                  _: 2
                  /* DYNAMIC */
                }, 1032, ["disabled", "size", "color", "onClick"])
              ]))),
              128
              /* KEYED_FRAGMENT */
            ))
          ]),
          _: 1
          /* STABLE */
        }),
        k(Be, R({
          key: "input-tags",
          modelValue: f.value,
          "onUpdate:modelValue": i[0] || (i[0] = (s) => f.value = s)
        }, u.$attrs, {
          placeholder: e.placeholder,
          label: e.label,
          "aria-label": e.label || e.placeholder,
          error: e.error,
          disabled: e.disabled,
          color: e.color,
          size: e.size,
          "no-border": "",
          class: "m-input-tags__input maz-flex-1",
          onKeydown: [
            q(n, ["enter"]),
            q(p, ["delete"])
          ]
        }), null, 16, ["modelValue", "placeholder", "label", "aria-label", "error", "disabled", "color", "size", "onKeydown"])
      ],
      38
      /* CLASS, STYLE, NEED_HYDRATION */
    ));
  }
}), Te = /* @__PURE__ */ P(Ce, [["__scopeId", "data-v-269e816a"]]);
export {
  Te as M,
  P as _
};
