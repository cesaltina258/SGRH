import "../assets/MazInputPrice.css";
import { computed as u, defineComponent as E, defineAsyncComponent as g, ref as k, getCurrentInstance as J, onMounted as K, useSlots as Q, openBlock as f, createElementBlock as h, normalizeClass as $, normalizeStyle as W, createElementVNode as z, renderSlot as x, createVNode as I, unref as v, createCommentVNode as y, withDirectives as X, mergeProps as Z, toHandlers as _, vModelDynamic as ee, createTextVNode as te, toDisplayString as re, createBlock as B, withModifiers as ae, withCtx as F, nextTick as ne, onBeforeMount as oe } from "vue";
const le = {
  style: "currency",
  minimumFractionDigits: 2,
  round: !1
}, ie = (e, o, r) => {
  let l = Number(e);
  return r.round && (l = Math.floor(l), r.minimumFractionDigits = 0), new Intl.NumberFormat(o, r).format(l);
}, ue = (e, o, r) => {
  if (e === void 0)
    throw new TypeError("[maz-ui](FilterCurrency) The `number` attribute is required.");
  if (o === void 0)
    throw new TypeError("[maz-ui](FilterCurrency) The `locale` attribute is required.");
  if (typeof o != "string")
    throw new TypeError("[maz-ui](FilterCurrency) The `locale` attribute must be a string.");
  if (r.currency === void 0)
    throw new TypeError("[maz-ui](FilterCurrency) The `options.currency` attribute is required.");
}, se = (e, o, r) => {
  const l = {
    ...le,
    ...r
  };
  ue(e, o, l);
  try {
    return ie(e, o, l);
  } catch (c) {
    throw new Error(`[maz-ui](FilterCurrency) ${c}`);
  }
};
function de(e, o) {
  let r;
  return function(...l) {
    clearTimeout(r), r = setTimeout(() => {
      e.apply(this, l);
    }, o);
  };
}
const ce = ({
  componentName: e,
  instance: o,
  providedId: r
}) => u(() => r ?? `${e}-${o == null ? void 0 : o.uid}`), me = {
  key: 0,
  class: "m-input-wrapper-left"
}, fe = { class: "m-input-wrapper-input" }, ye = ["id", "type", "name", "placeholder", "aria-label", "disabled", "readonly", "required"], ve = { key: 0 }, be = {
  key: 1,
  class: "m-input-wrapper-right"
}, pe = /* @__PURE__ */ E({
  inheritAttrs: !1,
  __name: "MazInput",
  props: {
    style: {
      type: [String, Array, Object],
      default: void 0
    },
    class: {
      type: [String, Array, Object],
      default: void 0
    },
    modelValue: {
      type: [String, Number, Boolean],
      default: void 0
    },
    placeholder: { type: String, default: void 0 },
    color: {
      type: String,
      default: "primary"
    },
    label: { type: String, default: void 0 },
    name: { type: String, default: "input" },
    type: {
      type: String,
      default: "text",
      validator: (e) => [
        "text",
        "date",
        "number",
        "tel",
        "search",
        "url",
        "password",
        "month",
        "time",
        "week",
        "email"
      ].includes(e)
    },
    required: { type: Boolean, default: !1 },
    disabled: { type: Boolean, default: !1 },
    readonly: { type: Boolean, default: !1 },
    id: { type: String, default: void 0 },
    error: { type: Boolean, default: !1 },
    success: { type: Boolean, default: !1 },
    warning: { type: Boolean, default: !1 },
    hint: { type: String, default: void 0 },
    inputClasses: { type: String, default: void 0 },
    noBorder: { type: Boolean, default: !1 },
    noRadius: { type: Boolean, default: !1 },
    size: {
      type: String,
      default: "md",
      validator: (e) => ["mini", "xs", "sm", "md", "lg", "xl"].includes(e)
    },
    debounce: { type: Boolean, default: !1 },
    debounceDelay: { type: Number, default: 500 },
    validButton: { type: Boolean, default: !1 },
    validButtonLoading: { type: Boolean, default: !1 },
    autoFocus: { type: Boolean, default: !1 },
    borderActive: { type: Boolean, default: !1 },
    leftIcon: { type: String, default: void 0 },
    rightIcon: { type: String, default: void 0 }
  },
  emits: ["focus", "blur", "update:model-value", "click", "change", "update"],
  setup(e, { emit: o }) {
    const r = g(() => import("./MazBtn-sUd8NHwp.mjs")), l = g(() => import("./MazIcon-RrJDzX3V.mjs")), c = g(() => import("./eye-slash-UoWe3WK1.mjs")), V = g(() => import("./eye-3jm1b22X.mjs")), S = g(() => import("./check-JxWJRZYz.mjs")), t = e, s = o, b = k(!1), m = k(!1), i = k(), n = J(), p = ce({
      componentName: "MazInput",
      instance: n,
      providedId: t.id
    });
    K(() => {
      var a;
      t.autoFocus && ((a = i.value) == null || a.focus());
    });
    const T = u(() => t.type === "password"), P = u(() => b.value ? "text" : t.type), A = u(() => {
      if (!t.noBorder) {
        if (t.error)
          return "maz-border-danger";
        if (t.success)
          return "maz-border-success";
        if (t.warning)
          return "maz-border-warning";
        if (m.value || t.borderActive) {
          if (t.color === "black")
            return "maz-border-black";
          if (t.color === "danger")
            return "maz-border-danger";
          if (t.color === "info")
            return "maz-border-info";
          if (t.color === "primary")
            return "maz-border-primary";
          if (t.color === "secondary")
            return "maz-border-secondary";
          if (t.color === "success")
            return "maz-border-success";
          if (t.color === "warning")
            return "maz-border-warning";
          if (t.color === "white")
            return "maz-border-white";
        }
        return "--default-border";
      }
    }), N = Q(), M = u(() => {
      const { required: a, placeholder: d } = t;
      if (d)
        return a ? `${d} *` : d;
    }), q = u(() => t.modelValue !== void 0 && t.modelValue !== ""), C = u({
      get: () => t.modelValue,
      set: (a) => G(a)
    }), D = u(() => (!!t.label || !!t.hint) && (m.value || !!q.value || !!t.placeholder || ["date", "month", "week"].includes(t.type))), O = u(() => !!t.label || !!t.hint), j = () => !!N["right-icon"] || T.value || !!N["valid-button"] || t.validButton || !!t.rightIcon, R = () => !!N["left-icon"] || !!t.leftIcon, U = (a) => {
      s("focus", a), m.value = !0;
    }, L = (a) => {
      s("blur", a), m.value = !1;
    }, H = (a) => s("change", a), Y = de((a) => {
      s("update:model-value", a);
    }, t.debounceDelay), G = (a) => {
      if (t.debounce)
        return Y(a);
      s("update:model-value", a);
    };
    return (a, d) => (f(), h(
      "div",
      {
        class: $(["m-input", [
          {
            "--is-focused": m.value || e.borderActive,
            "--should-up": D.value,
            "--has-label": O.value,
            "--is-disabled": e.disabled,
            "--is-readonly": e.readonly,
            "--has-z-2": e.error || e.warning || e.success,
            "--has-state": e.error || e.warning || e.success
          },
          t.class,
          `--${e.color}`,
          `--${e.size}`
        ]]),
        style: W(e.style)
      },
      [
        z(
          "div",
          {
            class: $(["m-input-wrapper", [e.inputClasses, A.value, { "maz-rounded": !e.noRadius }]])
          },
          [
            R() ? (f(), h("div", me, [
              a.$slots["left-icon"] || e.leftIcon ? x(a.$slots, "left-icon", { key: 0 }, () => [
                I(v(l), {
                  name: e.leftIcon,
                  class: "maz-text-xl maz-text-muted"
                }, null, 8, ["name"])
              ], !0) : y("v-if", !0)
            ])) : y("v-if", !0),
            z("div", fe, [
              X(z("input", Z({
                id: v(p),
                ref_key: "input",
                ref: i,
                "onUpdate:modelValue": d[0] || (d[0] = (w) => C.value = w),
                type: P.value,
                name: e.name
              }, a.$attrs, {
                placeholder: M.value,
                "aria-label": e.label || e.placeholder,
                disabled: e.disabled,
                readonly: e.readonly,
                required: e.required,
                class: "m-input-input"
              }, _({
                blur: L,
                focus: U,
                change: H
              }, !0), {
                onClick: d[1] || (d[1] = (w) => a.$emit("click", w))
              }), null, 16, ye), [
                [ee, C.value]
              ]),
              e.label || e.hint ? (f(), h(
                "span",
                {
                  key: 0,
                  ref: "label",
                  class: $(["m-input-label", [
                    {
                      "maz-text-danger-600": e.error,
                      "maz-text-success-600": e.success,
                      "maz-text-warning-600": e.warning
                    }
                  ]])
                },
                [
                  te(
                    re(e.hint || e.label) + " ",
                    1
                    /* TEXT */
                  ),
                  e.required ? (f(), h("sup", ve, "*")) : y("v-if", !0)
                ],
                2
                /* CLASS */
              )) : y("v-if", !0)
            ]),
            j() ? (f(), h("div", be, [
              a.$slots["right-icon"] || e.rightIcon ? x(a.$slots, "right-icon", { key: 0 }, () => [
                I(v(l), {
                  name: e.rightIcon,
                  class: "maz-text-xl maz-text-muted"
                }, null, 8, ["name"])
              ], !0) : y("v-if", !0),
              T.value ? (f(), B(v(r), {
                key: 1,
                color: "transparent",
                tabindex: "-1",
                size: "mini",
                onClick: d[2] || (d[2] = ae((w) => b.value = !b.value, ["stop"]))
              }, {
                default: F(() => [
                  b.value ? (f(), B(v(c), {
                    key: 0,
                    class: "maz-text-xl maz-text-muted"
                  })) : (f(), B(v(V), {
                    key: 1,
                    class: "maz-text-xl maz-text-muted"
                  }))
                ]),
                _: 1
                /* STABLE */
              })) : y("v-if", !0),
              a.$slots["valid-button"] || e.validButton ? x(a.$slots, "valid-button", { key: 2 }, () => [
                I(v(r), {
                  color: "transparent",
                  disabled: e.disabled,
                  tabindex: "-1",
                  loading: e.validButtonLoading,
                  class: "m-input-valid-button",
                  size: "mini",
                  type: "submit"
                }, {
                  default: F(() => [
                    I(v(S), { class: "maz-text-2xl maz-text-normal" })
                  ]),
                  _: 1
                  /* STABLE */
                }, 8, ["disabled", "loading"])
              ], !0) : y("v-if", !0)
            ])) : y("v-if", !0)
          ],
          2
          /* CLASS */
        )
      ],
      6
      /* CLASS, STYLE */
    ));
  }
}), ge = (e, o) => {
  const r = e.__vccOpts || e;
  for (const [l, c] of o)
    r[l] = c;
  return r;
}, he = /* @__PURE__ */ ge(pe, [["__scopeId", "data-v-acaa27d2"]]), ze = /* @__PURE__ */ z(
  "svg",
  {
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    stroke: "currentColor",
    "aria-hidden": "true",
    class: "maz-text-mute maz-ml-1 maz-h-6 maz-w-6"
  },
  [
    /* @__PURE__ */ z("path", {
      "stroke-linecap": "round",
      "stroke-linejoin": "round",
      "stroke-width": "2",
      d: "M17 9V7a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2m2 4h10a2 2 0 002-2v-6a2 2 0 00-2-2H9a2 2 0 00-2 2v6a2 2 0 002 2zm7-5a2 2 0 11-4 0 2 2 0 014 0z"
    })
  ],
  -1
  /* HOISTED */
), ke = /* @__PURE__ */ E({
  __name: "MazInputPrice",
  props: {
    modelValue: { type: [Number, String], default: void 0 },
    currency: { type: String, default: "EUR" },
    locale: { type: String, default: "fr-FR" },
    min: { type: Number, default: 0 },
    max: { type: Number, default: Number.POSITIVE_INFINITY },
    noIcon: { type: Boolean, default: !1 }
  },
  emits: ["update:model-value", "formatted"],
  setup(e, { emit: o }) {
    const r = e, l = o, c = k(!1), V = u(() => s(r.modelValue).toString()), S = u(() => {
      const i = typeof r.modelValue == "string" ? Number(r.modelValue) : r.modelValue;
      return s(i);
    }), t = u(
      () => se(S.value, r.locale, { currency: r.currency })
    ), s = (i) => {
      let n = typeof i == "string" ? Number.parseFloat(
        // eslint-disable-next-line no-useless-escape
        i.replace(",", ".").replaceAll(/[^\d.]/g, "")
      ) : i;
      return (!n || Number.isNaN(n)) && (n = 0), n < r.min && (n = r.min), n > r.max && (n = r.max), n;
    }, b = u({
      get: () => {
        if (c.value)
          return V.value;
        if (typeof r.modelValue == "number")
          return t.value;
      },
      set: (i) => {
        if (Number.isNaN(i))
          m();
        else {
          const n = s(i);
          m(n);
        }
      }
    }), m = async (i) => {
      const n = typeof i == "number" ? s(i) : void 0;
      l("update:model-value", n), await ne(), l("formatted", t.value);
    };
    return oe(() => {
      m(s(r.modelValue));
    }), (i, n) => (f(), B(he, {
      modelValue: b.value,
      "onUpdate:modelValue": n[0] || (n[0] = (p) => b.value = p),
      class: "maz-input-price",
      onFocus: n[1] || (n[1] = (p) => c.value = !0),
      onBlur: n[2] || (n[2] = (p) => c.value = !1)
    }, {
      "left-icon": F(() => [
        e.noIcon ? y("v-if", !0) : x(i.$slots, "left-icon", { key: 0 }, () => [
          ze
        ])
      ]),
      _: 3
      /* FORWARDED */
    }, 8, ["modelValue"]));
  }
});
export {
  ge as _,
  ke as a
};
