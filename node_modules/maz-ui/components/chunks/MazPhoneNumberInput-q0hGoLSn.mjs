import "../assets/MazPhoneNumberInput.css";
import { computed as f, defineComponent as xe, defineAsyncComponent as U, ref as y, getCurrentInstance as Ie, onMounted as Be, useSlots as Ee, openBlock as p, createElementBlock as z, normalizeClass as F, normalizeStyle as ee, createElementVNode as q, renderSlot as X, createVNode as L, unref as g, createCommentVNode as h, withDirectives as Ne, mergeProps as ke, toHandlers as Ke, vModelDynamic as Me, createTextVNode as Ce, toDisplayString as _, createBlock as ue, withModifiers as re, withCtx as te, useCssVars as Te, onBeforeMount as De, Transition as Oe, Fragment as Ue, renderList as Re, nextTick as J, reactive as qe, watch as ve } from "vue";
import { isSupportedCountry as He, getCountryCallingCode as Se, getExampleNumber as je, getCountries as We, parsePhoneNumberFromString as Ye, AsYouType as Qe } from "libphonenumber-js";
function Le(e) {
  return !!e;
}
const Ae = ({
  componentName: e,
  instance: u,
  providedId: n
}) => f(() => n ?? `${e}-${u == null ? void 0 : u.uid}`), Ge = {
  countrySelector: {
    placeholder: "Country code",
    error: "Choose country",
    searchPlaceholder: "Search the country"
  },
  phoneInput: {
    placeholder: "Phone number",
    example: "Example:"
  }
};
function $e(e) {
  return [...e].map((u) => {
    const n = u.codePointAt(0);
    return n ? n % 32 + 127461 : void 0;
  }).filter(Le).map((u) => String.fromCodePoint(u)).join("");
}
let be;
function Je(e, u, n) {
  return n != null && n[u] ? n[u] : (be || (be = new Intl.DisplayNames([e], { type: "region" })), be.of(u));
}
const Xe = /^[\d ().-]+$/, Ze = /^[^a-z]+$/i;
let Ve;
async function _e() {
  const { default: e } = await import("./examples.mobile.json-Q67ZfW9N.mjs");
  return Ve = e, Ve;
}
function et(e, u) {
  return Se(e) === Se(u);
}
function tt(e) {
  var u;
  try {
    return e ? (u = je(e, Ve)) == null ? void 0 : u.formatNational() : void 0;
  } catch (n) {
    console.error(`[maz-ui](MazPhoneNumberInput) ${n}`);
  }
}
function ot(e) {
  if (!e)
    return "";
  const u = Ze.test(e), n = Xe.test(e);
  return !u && !n ? e.replaceAll(/[^\d.]/g, "") : e;
}
function lt(e, u) {
  const n = [], A = We();
  e = e ?? Fe().browserLocale ?? "en-US";
  for (const x of A) {
    const R = Je(e, x, u);
    if (R)
      try {
        const E = Se(x);
        n.push({
          iso2: x,
          dialCode: E,
          name: R
        });
      } catch (E) {
        console.error(`[MazPhoneNumberInput](getCountryCallingCode) ${E}`);
      }
  }
  return n;
}
function Fe() {
  if (typeof window > "u")
    return {};
  const e = window.navigator.language;
  if (!e)
    return {};
  let u = e.slice(3, 7).toUpperCase();
  return u === "" && (u = e.slice(0, 2).toUpperCase()), u === "EN" && (u = "US"), u === "JA" && (u = "JP"), { locale: u, browserLocale: e };
}
function ge(e) {
  try {
    const u = He(e);
    return u || (console.error(`[maz-ui](MazPhoneNumberInput) The code country "${e}" is not available`), !1);
  } catch (u) {
    return console.error(`[maz-ui](MazPhoneNumberInput) ${u}`), !1;
  }
}
const at = ({
  phoneNumber: e,
  countryCode: u
}) => {
  try {
    if (!e)
      return {
        isValid: !1,
        countryCode: u
      };
    const n = Ye(e, u);
    return {
      isValid: (n == null ? void 0 : n.isValid()) ?? !1,
      isPossible: n == null ? void 0 : n.isPossible(),
      countryCode: n == null ? void 0 : n.country,
      countryCallingCode: n == null ? void 0 : n.countryCallingCode,
      nationalNumber: n == null ? void 0 : n.nationalNumber,
      type: n == null ? void 0 : n.getType(),
      formatInternational: n == null ? void 0 : n.formatInternational(),
      formatNational: n == null ? void 0 : n.formatNational(),
      uri: n == null ? void 0 : n.getURI(),
      e164: n == null ? void 0 : n.format("E.164"),
      rfc3966: n == null ? void 0 : n.format("RFC3966")
    };
  } catch (n) {
    throw new Error(`[MazPhoneNumberInput](getResultsFromPhoneNumber) ${n}`);
  }
};
function nt(e, u) {
  try {
    return u ? new Qe(e).input(u) : void 0;
  } catch (n) {
    throw new Error(`[MazPhoneNumberInput](getAsYouTypeFormat) ${n}`);
  }
}
async function rt() {
  try {
    const e = await fetch("https://ipwho.is"), { country_code: u } = await e.json();
    return u;
  } catch (e) {
    throw new Error(`[MazPhoneNumberInput](fetchCountryCode) ${e}`);
  }
}
function ut() {
  return {
    fetchCountryCode: rt,
    getAsYouTypeFormat: nt,
    getResultsFromPhoneNumber: at,
    loadPhoneNumberExamplesFile: _e,
    getPhoneNumberExample: tt,
    sanitizePhoneNumber: ot,
    getCountriesList: lt,
    browserLocale: Fe,
    isSameCountryCallingCode: et
  };
}
function it(e, u) {
  let n;
  return function(...A) {
    clearTimeout(n), n = setTimeout(() => {
      e.apply(this, A);
    }, u);
  };
}
const st = {
  key: 0,
  class: "m-input-wrapper-left"
}, ct = { class: "m-input-wrapper-input" }, dt = ["id", "type", "name", "placeholder", "aria-label", "disabled", "readonly", "required"], ft = { key: 0 }, mt = {
  key: 1,
  class: "m-input-wrapper-right"
}, yt = /* @__PURE__ */ xe({
  inheritAttrs: !1,
  __name: "MazInput",
  props: {
    style: {
      type: [String, Array, Object],
      default: void 0
    },
    class: {
      type: [String, Array, Object],
      default: void 0
    },
    modelValue: {
      type: [String, Number, Boolean],
      default: void 0
    },
    placeholder: { type: String, default: void 0 },
    color: {
      type: String,
      default: "primary"
    },
    label: { type: String, default: void 0 },
    name: { type: String, default: "input" },
    type: {
      type: String,
      default: "text",
      validator: (e) => [
        "text",
        "date",
        "number",
        "tel",
        "search",
        "url",
        "password",
        "month",
        "time",
        "week",
        "email"
      ].includes(e)
    },
    required: { type: Boolean, default: !1 },
    disabled: { type: Boolean, default: !1 },
    readonly: { type: Boolean, default: !1 },
    id: { type: String, default: void 0 },
    error: { type: Boolean, default: !1 },
    success: { type: Boolean, default: !1 },
    warning: { type: Boolean, default: !1 },
    hint: { type: String, default: void 0 },
    inputClasses: { type: String, default: void 0 },
    noBorder: { type: Boolean, default: !1 },
    noRadius: { type: Boolean, default: !1 },
    size: {
      type: String,
      default: "md",
      validator: (e) => ["mini", "xs", "sm", "md", "lg", "xl"].includes(e)
    },
    debounce: { type: Boolean, default: !1 },
    debounceDelay: { type: Number, default: 500 },
    validButton: { type: Boolean, default: !1 },
    validButtonLoading: { type: Boolean, default: !1 },
    autoFocus: { type: Boolean, default: !1 },
    borderActive: { type: Boolean, default: !1 },
    leftIcon: { type: String, default: void 0 },
    rightIcon: { type: String, default: void 0 }
  },
  emits: ["focus", "blur", "update:model-value", "click", "change", "update"],
  setup(e, { emit: u }) {
    const n = U(() => import("./MazBtn-oZrkoCig.mjs")), A = U(() => import("./MazIcon-RrJDzX3V.mjs")), x = U(() => import("./eye-slash-UoWe3WK1.mjs")), R = U(() => import("./eye-3jm1b22X.mjs")), E = U(() => import("./check-_5Up9njX.mjs")), o = e, C = u, I = y(!1), m = y(!1), c = y(), oe = Ie(), le = Ae({
      componentName: "MazInput",
      instance: oe,
      providedId: o.id
    });
    Be(() => {
      var i;
      o.autoFocus && ((i = c.value) == null || i.focus());
    });
    const H = f(() => o.type === "password"), B = f(() => I.value ? "text" : o.type), S = f(() => {
      if (!o.noBorder) {
        if (o.error)
          return "maz-border-danger";
        if (o.success)
          return "maz-border-success";
        if (o.warning)
          return "maz-border-warning";
        if (m.value || o.borderActive) {
          if (o.color === "black")
            return "maz-border-black";
          if (o.color === "danger")
            return "maz-border-danger";
          if (o.color === "info")
            return "maz-border-info";
          if (o.color === "primary")
            return "maz-border-primary";
          if (o.color === "secondary")
            return "maz-border-secondary";
          if (o.color === "success")
            return "maz-border-success";
          if (o.color === "warning")
            return "maz-border-warning";
          if (o.color === "white")
            return "maz-border-white";
        }
        return "--default-border";
      }
    }), P = Ee(), N = f(() => {
      const { required: i, placeholder: s } = o;
      if (s)
        return i ? `${s} *` : s;
    }), Z = f(() => o.modelValue !== void 0 && o.modelValue !== ""), K = f({
      get: () => o.modelValue,
      set: (i) => v(i)
    }), j = f(() => (!!o.label || !!o.hint) && (m.value || !!Z.value || !!o.placeholder || ["date", "month", "week"].includes(o.type))), M = f(() => !!o.label || !!o.hint), W = () => !!P["right-icon"] || H.value || !!P["valid-button"] || o.validButton || !!o.rightIcon, ae = () => !!P["left-icon"] || !!o.leftIcon, T = (i) => {
      C("focus", i), m.value = !0;
    }, D = (i) => {
      C("blur", i), m.value = !1;
    }, V = (i) => C("change", i), Y = it((i) => {
      C("update:model-value", i);
    }, o.debounceDelay), v = (i) => {
      if (o.debounce)
        return Y(i);
      C("update:model-value", i);
    };
    return (i, s) => (p(), z(
      "div",
      {
        class: F(["m-input", [
          {
            "--is-focused": m.value || e.borderActive,
            "--should-up": j.value,
            "--has-label": M.value,
            "--is-disabled": e.disabled,
            "--is-readonly": e.readonly,
            "--has-z-2": e.error || e.warning || e.success,
            "--has-state": e.error || e.warning || e.success
          },
          o.class,
          `--${e.color}`,
          `--${e.size}`
        ]]),
        style: ee(e.style)
      },
      [
        q(
          "div",
          {
            class: F(["m-input-wrapper", [e.inputClasses, S.value, { "maz-rounded": !e.noRadius }]])
          },
          [
            ae() ? (p(), z("div", st, [
              i.$slots["left-icon"] || e.leftIcon ? X(i.$slots, "left-icon", { key: 0 }, () => [
                L(g(A), {
                  name: e.leftIcon,
                  class: "maz-text-xl maz-text-muted"
                }, null, 8, ["name"])
              ], !0) : h("v-if", !0)
            ])) : h("v-if", !0),
            q("div", ct, [
              Ne(q("input", ke({
                id: g(le),
                ref_key: "input",
                ref: c,
                "onUpdate:modelValue": s[0] || (s[0] = ($) => K.value = $),
                type: B.value,
                name: e.name
              }, i.$attrs, {
                placeholder: N.value,
                "aria-label": e.label || e.placeholder,
                disabled: e.disabled,
                readonly: e.readonly,
                required: e.required,
                class: "m-input-input"
              }, Ke({
                blur: D,
                focus: T,
                change: V
              }, !0), {
                onClick: s[1] || (s[1] = ($) => i.$emit("click", $))
              }), null, 16, dt), [
                [Me, K.value]
              ]),
              e.label || e.hint ? (p(), z(
                "span",
                {
                  key: 0,
                  ref: "label",
                  class: F(["m-input-label", [
                    {
                      "maz-text-danger-600": e.error,
                      "maz-text-success-600": e.success,
                      "maz-text-warning-600": e.warning
                    }
                  ]])
                },
                [
                  Ce(
                    _(e.hint || e.label) + " ",
                    1
                    /* TEXT */
                  ),
                  e.required ? (p(), z("sup", ft, "*")) : h("v-if", !0)
                ],
                2
                /* CLASS */
              )) : h("v-if", !0)
            ]),
            W() ? (p(), z("div", mt, [
              i.$slots["right-icon"] || e.rightIcon ? X(i.$slots, "right-icon", { key: 0 }, () => [
                L(g(A), {
                  name: e.rightIcon,
                  class: "maz-text-xl maz-text-muted"
                }, null, 8, ["name"])
              ], !0) : h("v-if", !0),
              H.value ? (p(), ue(g(n), {
                key: 1,
                color: "transparent",
                tabindex: "-1",
                size: "mini",
                onClick: s[2] || (s[2] = re(($) => I.value = !I.value, ["stop"]))
              }, {
                default: te(() => [
                  I.value ? (p(), ue(g(x), {
                    key: 0,
                    class: "maz-text-xl maz-text-muted"
                  })) : (p(), ue(g(R), {
                    key: 1,
                    class: "maz-text-xl maz-text-muted"
                  }))
                ]),
                _: 1
                /* STABLE */
              })) : h("v-if", !0),
              i.$slots["valid-button"] || e.validButton ? X(i.$slots, "valid-button", { key: 2 }, () => [
                L(g(n), {
                  color: "transparent",
                  disabled: e.disabled,
                  tabindex: "-1",
                  loading: e.validButtonLoading,
                  class: "m-input-valid-button",
                  size: "mini",
                  type: "submit"
                }, {
                  default: te(() => [
                    L(g(E), { class: "maz-text-2xl maz-text-normal" })
                  ]),
                  _: 1
                  /* STABLE */
                }, 8, ["disabled", "loading"])
              ], !0) : h("v-if", !0)
            ])) : h("v-if", !0)
          ],
          2
          /* CLASS */
        )
      ],
      6
      /* CLASS, STYLE */
    ));
  }
}), Pe = (e, u) => {
  const n = e.__vccOpts || e;
  for (const [A, x] of u)
    n[A] = x;
  return n;
}, we = /* @__PURE__ */ Pe(yt, [["__scopeId", "data-v-acaa27d2"]]);
y("system");
y("system");
y();
y([]);
let ze = null;
function vt(e, u) {
  ze && clearTimeout(ze), ze = setTimeout(e, u);
}
const pt = ["onClick"], ht = {
  key: 0,
  tabindex: "-1",
  class: "m-select-list__search-wrapper"
}, bt = { class: "m-select-list__no-results" }, gt = {
  key: 2,
  class: "m-select-list__scroll-wrapper",
  tabindex: "-1"
}, zt = ["onClick"], Ct = /* @__PURE__ */ xe({
  inheritAttrs: !1,
  __name: "MazSelect",
  props: {
    style: {
      type: [String, Array, Object],
      default: void 0
    },
    class: {
      type: [String, Array, Object],
      default: void 0
    },
    modelValue: {
      type: [Number, String, Boolean, Array],
      default: void 0
    },
    id: { type: String, default: void 0 },
    options: { type: Array, default: void 0 },
    optionValueKey: { type: String, default: "value" },
    optionLabelKey: { type: String, default: "label" },
    optionInputValueKey: { type: String, default: "label" },
    listPosition: {
      type: String,
      default: "bottom left",
      validator: (e) => ["top", "top right", "top left", "bottom", "bottom right", "bottom left"].includes(
        e
      )
    },
    required: { type: Boolean, default: !1 },
    disabled: { type: Boolean, default: !1 },
    open: { type: Boolean, default: !1 },
    /** Choose color of the input */
    color: {
      type: String,
      default: "primary"
    },
    /** Choose the option list item height */
    itemHeight: { type: Number, default: 40 },
    maxListHeight: { type: Number, default: 240 },
    /** Add max-width value to option list */
    maxListWidth: { type: Number, default: void 0 },
    /** Choose size of the input */
    size: {
      type: String,
      default: "md",
      validator: (e) => ["mini", "xs", "sm", "md", "lg", "xl"].includes(e)
    },
    /** Display search input in option list */
    search: { type: Boolean, default: !1 },
    /** Search input placeholder */
    searchPlaceholder: { type: String, default: "Search in options" },
    /** Enable feature to select multiple values */
    multiple: { type: Boolean, default: !1 }
  },
  emits: [
    "close",
    "open",
    "blur",
    "focus",
    "change",
    "update:model-value",
    /** On selected value, returns the option object */
    "selected-option"
  ],
  setup(e, { emit: u }) {
    Te((a) => ({
      "99826e10": H.value,
      "6c56f7b7": oe.value,
      99876842: le.value
    }));
    const n = U(() => import("./MazCheckbox-LIa1Kkf_.mjs")), A = U(() => import("./magnifying-glass-ebhrla2J.mjs")), x = U(() => import("./chevron-down-bC0s_0yH.mjs")), R = U(() => import("./no-symbol-JnXtUaU-.mjs")), E = Ie(), o = e, C = u, I = y(!1), m = y(), c = f(
      () => ["black", "transparent", "white"].includes(o.color)
    ), oe = f(
      () => c.value ? "var(--maz-color-black)" : `var(--maz-color-${o.color}-800)`
    ), le = f(
      () => c.value ? "var(--maz-color-muted)" : `var(--maz-color-${o.color}-100)`
    ), H = f(
      () => c.value ? "var(--maz-color-muted)" : `var(--maz-color-${o.color}-200)`
    ), B = f(() => I.value || o.open), S = Ae({
      componentName: "MazSelect",
      instance: E,
      providedId: o.id
    }), P = f(
      () => {
        var a;
        return ((a = o.options) == null ? void 0 : a.filter((t) => o.multiple ? Array.isArray(o.modelValue) ? o.modelValue.includes(t[o.optionValueKey]) && !M(t[o.optionValueKey]) : !1 : o.modelValue === t[o.optionValueKey] && !M(t[o.optionValueKey]))) ?? [];
      }
    );
    De(() => {
      var a;
      (a = o.options) != null && a.length || console.warn("[maz-ui](MazSelect) you must provide options"), G();
    });
    const N = y(), Z = y(), K = y(), j = y(), M = (a) => a == null;
    function W(a) {
      var l;
      return (((l = P.value) == null ? void 0 : l.some(
        (r) => r[o.optionValueKey] === a[o.optionValueKey]
      )) ?? !1) && !M(a[o.optionValueKey]);
    }
    const ae = f(() => {
      var a, t;
      return o.multiple && o.modelValue && Array.isArray(o.modelValue) ? o.modelValue.map(
        (l) => {
          var r, d;
          return (d = (r = o.options) == null ? void 0 : r.find((b) => b[o.optionValueKey] === l)) == null ? void 0 : d[o.optionInputValueKey];
        }
      ).join(", ") : (t = (a = o.options) == null ? void 0 : a.find((l) => l[o.optionValueKey] === o.modelValue)) == null ? void 0 : t[o.optionInputValueKey];
    }), T = f(
      () => o.listPosition.includes("bottom") ? "maz-slide" : "maz-slideinvert"
    ), D = y(""), V = y("");
    function Y(a) {
      return a.normalize("NFD").replaceAll(/[\u0300-\u036F]/g, "").replaceAll(/[^\dA-Za-z\u0400-\u04FF]/g, "");
    }
    const v = (a, t) => t && a && Y(a.toString().toLocaleLowerCase().trim()).includes(
      Y(t.toLocaleLowerCase().trim())
    );
    function i(a) {
      var t;
      return a ? (t = o.options) == null ? void 0 : t.filter((l) => {
        const r = l[o.optionLabelKey], d = l[o.optionValueKey], b = l[o.optionInputValueKey];
        return v(r, a) || v(d, a) || v(b, a);
      }) : o.options;
    }
    const s = f(() => i(D.value)), $ = async (a) => {
      var t;
      if (a && ("relatedTarget" in a && ((t = N.value) != null && t.contains(a.relatedTarget)) || a.type === "keydown"))
        return a.preventDefault();
      await J(), I.value = !1, m.value = 0, C("close", a);
    }, w = async (a) => {
      o.disabled || B.value || (a == null || a.preventDefault(), I.value = !0, await ne(), C("focus", a), C("open", I.value));
    };
    function ie() {
      var a, t;
      (t = ((a = Z.value) == null ? void 0 : a.$el).querySelector("input")) == null || t.focus();
    }
    function pe(a) {
      I.value ? $(a) : ie();
    }
    function he(a) {
      var t, l;
      D.value = a, (l = ((t = K.value) == null ? void 0 : t.$el).querySelector("input")) == null || l.focus();
    }
    function se(a) {
      var l;
      a === "Backspace" && V.value.length > 0 ? V.value = V.value.slice(0, -1) : V.value += a;
      const t = i(V.value);
      t != null && t.length && (m.value = (l = s.value) == null ? void 0 : l.findIndex(
        (r) => r[o.optionValueKey] === t[0][o.optionValueKey]
      ), typeof m.value == "number" && m.value >= 0 && ne(m.value)), vt(() => {
        V.value = "";
      }, 1e3);
    }
    const ce = (a) => {
      const t = a.key;
      /^[\dA-Za-z\u0400-\u04FF]$/.test(t) ? (a.preventDefault(), w(a), o.search ? he(t) : se(t)) : de(a);
    }, de = (a) => {
      const t = a.code, l = ["ArrowUp", "ArrowDown"].includes(t), r = ["Enter", "Space"].includes(t), d = t === "Escape" && B.value;
      l ? Q(a, m.value) : r ? fe(a, m.value) : d && $();
    }, Q = (a, t) => {
      var d;
      a.preventDefault();
      const l = a.code;
      B.value || w(a);
      const r = (d = s.value) == null ? void 0 : d.length;
      r && (typeof t == "number" ? t === r - 1 && l === "ArrowDown" ? m.value = 0 : t === 0 && l === "ArrowUp" ? m.value = r - 1 : m.value = l === "ArrowDown" ? t + 1 : t - 1 : m.value = l === "ArrowDown" ? 0 : r - 1, ne(m.value));
    }, fe = (a, t) => {
      var r, d, b;
      if (a.preventDefault(), !B.value)
        return w(a);
      const l = t ? ((r = s.value) == null ? void 0 : r[t]) ?? ((d = s.value) == null ? void 0 : d[0]) : (b = s.value) == null ? void 0 : b[0];
      M(l) || me(l);
    };
    async function ne(a) {
      var l, r;
      await J(), typeof a != "number" && G();
      const t = a ?? m.value;
      typeof t == "number" && t >= 0 && ((r = (l = j.value) == null ? void 0 : l.querySelectorAll(".m-select-list-item")[t]) == null || r.scrollIntoView({
        behavior: "auto",
        block: "nearest",
        inline: "start"
      }));
    }
    function G(a) {
      var l;
      const t = (l = s.value) == null ? void 0 : l.findIndex((r) => {
        var d, b;
        return o.multiple && Array.isArray(o.modelValue) ? a ? a[o.optionValueKey] === r[o.optionValueKey] : [...o.modelValue].reverse()[0] === r[o.optionValueKey] : ((b = (d = P.value) == null ? void 0 : d[0]) == null ? void 0 : b[o.optionValueKey]) === r[o.optionValueKey];
      });
      m.value = t && t >= 0 ? t : 0;
    }
    const me = (a, t = !0) => {
      var b;
      t && !o.multiple && J(() => $()), D.value = "";
      const l = (b = P.value) == null ? void 0 : b.some(
        (O) => O[o.optionValueKey] === a[o.optionValueKey]
      );
      let r = P.value;
      l && o.multiple ? r = r == null ? void 0 : r.filter(
        (O) => O[o.optionValueKey] !== a[o.optionValueKey]
      ) : o.multiple ? r.push(a) : r = [a];
      const d = r.map((O) => O[o.optionValueKey]);
      C("update:model-value", o.multiple ? d : d[0]), C("selected-option", a), G(a), ie();
    };
    return (a, t) => (p(), z(
      "div",
      {
        ref_key: "mazSelectElement",
        ref: N,
        class: F(["m-select", [{ "--is-open": B.value, "--disabled": e.disabled }, o.class]]),
        style: ee(e.style),
        onBlurCapture: $
      },
      [
        L(we, ke({
          id: g(S),
          ref_key: "mazInputComponent",
          ref: Z,
          class: "m-select-input"
        }, a.$attrs, {
          required: e.required,
          "border-active": I.value,
          color: e.color,
          "model-value": ae.value,
          autocomplete: "off",
          size: e.size,
          disabled: e.disabled,
          onFocus: re(w, ["prevent", "stop"]),
          onClick: re(w, ["prevent", "stop"]),
          onChange: t[0] || (t[0] = (l) => C("change", l)),
          onKeydown: ce
        }), {
          "right-icon": te(() => [
            q("button", {
              tabindex: "-1",
              type: "button",
              class: "m-select-input__toggle-button maz-custom",
              onClick: re(pe, ["stop"])
            }, [
              L(g(x), { class: "m-select-chevron maz-text-xl" })
            ], 8, pt)
          ]),
          _: 1
          /* STABLE */
        }, 16, ["id", "required", "border-active", "color", "model-value", "size", "disabled", "onFocus", "onClick"]),
        L(Oe, { name: T.value }, {
          default: te(() => [
            B.value ? (p(), z(
              "div",
              {
                key: 0,
                ref_key: "optionsListElement",
                ref: j,
                class: F(["m-select-list", {
                  "--top": e.listPosition.includes("top"),
                  "--left": e.listPosition.includes("left"),
                  "--right": e.listPosition.includes("right"),
                  "--bottom": e.listPosition.includes("bottom")
                }]),
                style: ee({
                  maxHeight: `${e.maxListHeight}px`,
                  maxWidth: `${e.maxListWidth}px`
                })
              },
              [
                e.search ? (p(), z("div", ht, [
                  L(we, {
                    ref_key: "searchInputComponent",
                    ref: K,
                    modelValue: D.value,
                    "onUpdate:modelValue": [
                      t[1] || (t[1] = (l) => D.value = l),
                      t[2] || (t[2] = (l) => m.value = 0)
                    ],
                    size: "sm",
                    color: e.color,
                    placeholder: e.searchPlaceholder,
                    name: "search",
                    autocomplete: "off",
                    tabindex: "-1",
                    class: "m-select-list__search-input",
                    onKeydown: de
                  }, {
                    "left-icon": te(() => [
                      L(g(A), { class: "maz-h-[1.3rem] maz-w-[1.3rem]" })
                    ]),
                    _: 1
                    /* STABLE */
                  }, 8, ["modelValue", "color", "placeholder"])
                ])) : h("v-if", !0),
                h(`
          @slot No results slot - Displayed when no results corresponding with seeach query
        `),
                !s.value || s.value.length <= 0 ? X(a.$slots, "no-results", { key: 1 }, () => [
                  q("span", bt, [
                    L(g(R), { class: "maz-h-6 maz-w-6 maz-text-normal" })
                  ])
                ], !0) : (p(), z("div", gt, [
                  (p(!0), z(
                    Ue,
                    null,
                    Re(s.value, (l, r) => (p(), z("button", {
                      key: r,
                      tabindex: "-1",
                      type: "button",
                      class: F(["m-select-list-item maz-custom", [
                        {
                          "--is-keyboard-selected": m.value === r,
                          "--is-selected": W(l),
                          "--is-none-value": M(l[e.optionValueKey])
                        }
                      ]]),
                      style: ee({ minHeight: `${e.itemHeight}px` }),
                      onClick: re((d) => me(l), ["prevent", "stop"])
                    }, [
                      e.multiple ? (p(), ue(g(n), {
                        key: 0,
                        tabindex: "-1",
                        "model-value": W(l),
                        size: "sm",
                        color: e.color
                      }, null, 8, ["model-value", "color"])) : h("v-if", !0),
                      h(`
              @slot Custom option
                @binding {Object} option
                @binding {Boolean} is-selected
            `),
                      X(a.$slots, "default", {
                        option: l,
                        isSelected: W(l)
                      }, () => [
                        q(
                          "span",
                          null,
                          _(l[e.optionLabelKey]),
                          1
                          /* TEXT */
                        )
                      ], !0)
                    ], 14, zt))),
                    128
                    /* KEYED_FRAGMENT */
                  ))
                ]))
              ],
              6
              /* CLASS, STYLE */
            )) : h("v-if", !0)
          ]),
          _: 3
          /* FORWARDED */
        }, 8, ["name"])
      ],
      38
      /* CLASS, STYLE, NEED_HYDRATION */
    ));
  }
}), St = /* @__PURE__ */ Pe(Ct, [["__scopeId", "data-v-8f4d312d"]]), Vt = ["id"], wt = {
  key: 0,
  class: "maz-text-lg"
}, xt = /* @__PURE__ */ xe({
  inheritAttrs: !1,
  __name: "MazPhoneNumberInput",
  props: {
    style: {
      type: [String, Array, Object],
      default: void 0
    },
    class: {
      type: [String, Array, Object],
      default: void 0
    },
    /** Country calling code + telephone number in international format */
    modelValue: {
      type: String,
      validator: (e) => typeof e == "string" || e === void 0,
      default: void 0
    },
    /** @deprecated */
    defaultPhoneNumber: { type: String, default: void 0 },
    /** Country code selected - Ex: "FR" */
    countryCode: {
      type: String,
      default: void 0,
      validator: (e) => ge(e)
    },
    /** @deprecated - use country-code or v-model:country-code */
    defaultCountryCode: {
      type: String,
      default: void 0,
      validator: (e) => ge(e)
    },
    id: { type: String, default: void 0 },
    placeholder: { type: String, default: void 0 },
    /** List of country codes to place first in the select list - Ex: ['FR', 'BE', 'GE'] */
    preferredCountries: { type: Array, default: void 0 },
    /** List of country codes to be removed from the select list - Ex: ['FR', 'BE', 'GE'] */
    ignoredCountries: { type: Array, default: void 0 },
    /** List of country codes to only have the countries selected in the select list - Ex: ['FR', 'BE', 'GE'] */
    onlyCountries: { type: Array, default: void 0 },
    /** Locale strings of the component */
    translations: { type: Object, default: void 0 },
    /** Position where the list of countries will be opened */
    listPosition: {
      type: String,
      default: "bottom left",
      validator: (e) => ["top", "top right", "top left", "bottom", "bottom right", "bottom left"].includes(
        e
      )
    },
    /** Component color applied - Ex: "secondary" */
    color: { type: String, default: "primary" },
    /** Component size applied - Ex: "sm" */
    size: {
      type: String,
      default: "md",
      validator: (e) => ["mini", "xs", "sm", "md", "lg", "xl"].includes(e)
    },
    /** Remove flags in country list */
    noFlags: { type: Boolean, default: !1 },
    /** Disable input */
    disabled: { type: Boolean, default: !1 },
    /** No show the phone number example */
    noExample: { type: Boolean, default: !1 },
    /** Disable search input in country list */
    noSearch: { type: Boolean, default: !1 },
    /** By default the component use the browser locale to set the default country code if not country code is provided */
    noUseBrowserLocale: { type: Boolean, default: !1 },
    /** The component will make a request to get the location of the user and use it to set the default country code */
    fetchCountry: { type: Boolean, default: !1 },
    /** No show the country selector */
    noCountrySelector: { type: Boolean, default: !1 },
    /** Show country calling code in the country list */
    showCodeOnList: { type: Boolean, default: !1 },
    /** Replace country names */
    customCountriesList: {
      type: Object,
      default: void 0
    },
    /** Disabled auto-format as you type */
    noFormattingAsYouType: { type: Boolean, default: !1 },
    /**
     * locale of country list - Ex: "fr-FR"
     * @default {string} browser locale
     */
    countryLocale: { type: String, default: void 0 },
    /** Disable validation error UI */
    noValidationError: { type: Boolean, default: !1 },
    /** Disable validation success UI */
    noValidationSuccess: { type: Boolean, default: !1 },
    /** Add success UI */
    success: { type: Boolean, default: !1 },
    /** Add error UI */
    error: { type: Boolean, default: !1 },
    /** Will replace the calling code by the country name in the country selector */
    countrySelectorDisplayName: { type: Boolean, default: !1 },
    /** Choose the width of the country selector */
    countrySelectorWidth: { type: String, default: "9rem" }
  },
  emits: [
    /** emitted when country or phone number changes
     * @property {Result} results - meta info of current phone numnber
     */
    "update",
    /** emitted when country or phone number changes
     * @property {Result} results - meta info of current phone numnber
     */
    "data",
    /** emitted when selected country changes
     * @property {CountryCode} countryCode - Country code
     */
    "country-code",
    /** emitted when country or phone number changes
     * @property {String} phoneNumber - phoneNumber formatted
     */
    "update:model-value",
    /** emitted when country changes
     * @property {CountryCode} countryCode - Country code
     */
    "update:country-code"
  ],
  setup(e, { emit: u }) {
    const {
      fetchCountryCode: n,
      browserLocale: A,
      getResultsFromPhoneNumber: x,
      getAsYouTypeFormat: R,
      getCountriesList: E,
      getPhoneNumberExample: o,
      sanitizePhoneNumber: C,
      loadPhoneNumberExamplesFile: I
    } = ut(), m = u, c = e, oe = Ie(), le = Ae({
      componentName: "MazPhoneNumberInput",
      instance: oe,
      providedId: c.id
    }), H = y(), B = y(), S = qe({
      start: 0,
      end: 0,
      cursorAtEnd: !0
    }), P = y(!1), N = y(!1), Z = f(() => E(c.countryLocale, c.customCountriesList)), K = f(() => {
      var t;
      return (t = Z.value) == null ? void 0 : t.filter((l) => {
        var r;
        return !((r = c.ignoredCountries) != null && r.includes(l.iso2));
      });
    }), j = f(() => {
      const t = c.onlyCountries || c.preferredCountries;
      return t == null ? void 0 : t.map(
        (l) => {
          var r;
          return (r = K.value) == null ? void 0 : r.find((d) => d.iso2.includes(l));
        }
      );
    }), M = f(() => {
      var t;
      return (t = K.value) == null ? void 0 : t.filter((l) => {
        var r;
        return !((r = c.preferredCountries) != null && r.includes(l.iso2));
      });
    }), W = f(() => c.preferredCountries ? [...j.value ?? [], ...M.value ?? []] : c.onlyCountries ? j.value : K.value), ae = f(() => {
      var t;
      return (t = W.value) == null ? void 0 : t.map((l) => l ? {
        ...l,
        dialCode: `+${l.dialCode}`
      } : void 0).filter(Le);
    }), T = f(() => ({
      ...Ge,
      ...c.translations
    })), D = f(() => {
      if (c.placeholder)
        return c.placeholder;
      const t = T.value.phoneInput.placeholder;
      if (c.noExample || !P.value)
        return t;
      {
        const l = o(v.value);
        return s.value.isValid || !l ? t : `${T.value.phoneInput.example} ${l}`;
      }
    }), V = f({
      get: () => c.modelValue || c.defaultPhoneNumber,
      set: (t) => {
        m("update:model-value", t);
      }
    }), Y = y(), v = f({
      get: () => c.countryCode || c.defaultCountryCode || Y.value,
      set: (t) => {
        m("country-code", t), m("update:country-code", t), Y.value = t;
      }
    }), i = y(V.value), s = y(
      x({
        phoneNumber: V.value,
        countryCode: v.value
      })
    ), $ = y(), w = f(() => c.noFormattingAsYouType ? i.value ?? "" : $.value ?? i.value ?? "");
    async function ie() {
      const t = await n();
      t && Q(t);
    }
    async function pe() {
      try {
        !c.noExample && !P.value && (await I(), P.value = !0);
      } catch {
        console.error("[maz-ui](MazPhoneNumberInput) while loading phone number examples file");
      }
    }
    Be(async () => {
      await fe(V.value), await J(), c.fetchCountry && !v.value && await ie(), !c.defaultCountryCode && !c.noUseBrowserLocale && !v.value && he(), await pe();
    }), ve(
      () => s.value,
      (t) => {
        m("update", t), m("data", t);
      },
      { immediate: !0, deep: !0 }
    ), ve(
      () => v.value,
      (t, l) => {
        t && t !== l && (Q(t), ce(w.value));
      }
    ), ve(
      () => V.value,
      async (t, l) => {
        t !== l && fe(t);
      }
    ), ve(
      () => w.value,
      async (t, l) => {
        if (!c.noFormattingAsYouType && t && t !== l) {
          const r = G();
          if (r && !s.value.isValid && typeof S.start == "number" && !S.cursorAtEnd) {
            const d = S.start, b = S.end;
            setTimeout(() => {
              r.setSelectionRange(d, b ?? d);
            }, 0);
          }
        }
      }
    );
    function he() {
      const { locale: t } = A();
      t && Q(t);
    }
    function se(t, l) {
      s.value = x({
        phoneNumber: t,
        countryCode: l
      });
    }
    async function ce(t) {
      const l = G();
      S.start = l == null ? void 0 : l.selectionStart, S.end = l == null ? void 0 : l.selectionEnd, S.cursorAtEnd = S.start ? S.start >= t.length : !0;
      const r = C(t);
      i.value = r;
      const d = x({
        phoneNumber: r,
        countryCode: v.value
      });
      V.value = d.e164;
    }
    function de(t) {
      se(w.value, t), Q(t, !0);
    }
    function Q(t, l = !1) {
      try {
        ge(t) && (v.value = t, l && a());
      } catch (r) {
        console.error(`[maz-ui](MazPhoneNumberInput) ${r}`);
      }
    }
    async function fe(t) {
      se(t, v.value), await J(), c.noFormattingAsYouType ? i.value = w.value : $.value = S.cursorAtEnd || s.value.isValid ? i.value = R(
        s.value.countryCode ?? v.value,
        s.value.formatNational ?? i.value
      ) : i.value, await J(), ne(s.value);
    }
    function ne(t) {
      t.countryCode && v.value !== t.countryCode && Q(t.countryCode);
    }
    function G() {
      var t;
      return (t = H.value) == null ? void 0 : t.$el.querySelector("input");
    }
    function me() {
      var t, l;
      (l = (t = B.value) == null ? void 0 : t.$el.querySelector("input")) == null || l.focus();
    }
    async function a() {
      var t;
      await J(), (t = G()) == null || t.focus();
    }
    return (t, l) => {
      var r, d, b, O;
      return p(), z("div", {
        id: g(le),
        class: F(["m-phone-number-input", [
          c.class,
          {
            "--no-flags": e.noFlags
          }
        ]]),
        style: ee(e.style)
      }, [
        v.value && !e.noFlags && !e.noCountrySelector ? (p(), z("button", {
          key: 0,
          class: "m-phone-number-input__country-flag maz-text-xl",
          tabindex: "-1",
          type: "button",
          onClick: me
        }, [
          h(`
        @slot Country selector flag
          @binding {String} country-code - current selected country code - Ex: \`"FR"\`
      `),
          X(t.$slots, "selector-flag", { countryCode: v.value }, () => [
            Ce(
              _(g($e)(v.value)),
              1
              /* TEXT */
            )
          ], !0)
        ])) : h("v-if", !0),
        e.noCountrySelector ? h("v-if", !0) : (p(), ue(St, {
          key: 1,
          ref_key: "CountrySelector",
          ref: B,
          class: "m-phone-number-input__select",
          "model-value": v.value,
          "option-value-key": "iso2",
          "option-label-key": "name",
          "option-input-value-key": e.countrySelectorDisplayName ? "name" : "dialCode",
          "max-list-width": 250,
          disabled: e.disabled,
          color: e.color,
          size: e.size,
          "list-position": e.listPosition,
          search: !e.noSearch,
          "search-placeholder": T.value.countrySelector.searchPlaceholder,
          options: ae.value,
          error: e.error || (e.noValidationError ? !1 : !!w.value && !v.value),
          hint: w.value && !v.value ? T.value.countrySelector.error : void 0,
          label: T.value.countrySelector.placeholder,
          success: e.success || (e.noValidationSuccess ? !1 : (r = s.value) == null ? void 0 : r.isValid),
          style: ee({
            width: e.countrySelectorWidth
          }),
          "onUpdate:modelValue": l[0] || (l[0] = (k) => de(k)),
          onFocus: l[1] || (l[1] = (k) => N.value = !1)
        }, {
          default: te(({ option: k, isSelected: ye }) => [
            q(
              "div",
              {
                class: F(["m-phone-number-input__select__item maz-flex maz-items-center maz-gap-1 maz-truncate", {
                  "m-phone-number-input__select__item--selected": ye
                }])
              },
              [
                !e.noFlags && typeof k.iso2 == "string" ? (p(), z("span", wt, [
                  h(`
              @slot Country list flag
                @binding {String} country-code - country code of option - Ex: \`"FR"\`
                @binding {{ iso2: string; dialCode: string; name: string; }} option - country data
                @binding {Boolean} is-selected - \`true\` if option is selected
            `),
                  X(t.$slots, "country-list-flag", {
                    countryCode: k.iso2,
                    option: k,
                    isSelected: ye
                  }, () => [
                    Ce(
                      _(g($e)(k.iso2)),
                      1
                      /* TEXT */
                    )
                  ], !0)
                ])) : h("v-if", !0),
                e.showCodeOnList ? (p(), z(
                  "span",
                  {
                    key: 1,
                    class: F(["maz-w-9 maz-flex-none", { "maz-text-muted": !ye }])
                  },
                  _(k.dialCode),
                  3
                  /* TEXT, CLASS */
                )) : h("v-if", !0),
                q(
                  "span",
                  {
                    class: F(["maz-flex-1 maz-truncate", { "maz-font-semibold": ye }])
                  },
                  _(k.name),
                  3
                  /* TEXT, CLASS */
                )
              ],
              2
              /* CLASS */
            )
          ]),
          _: 3
          /* FORWARDED */
        }, 8, ["model-value", "option-input-value-key", "disabled", "color", "size", "list-position", "search", "search-placeholder", "options", "error", "hint", "label", "success", "style"])),
        L(we, ke({
          id: e.id,
          ref_key: "PhoneNumberInput",
          ref: H,
          "model-value": w.value,
          label: D.value,
          disabled: e.disabled,
          color: e.color,
          error: e.error || (e.noValidationError ? !1 : !!w.value && !((d = s.value) != null && d.isValid))
        }, t.$attrs, {
          size: e.size,
          "icon-name": "phone",
          type: "tel",
          clearable: "",
          success: e.success || (e.noValidationSuccess ? !1 : (b = s.value) == null ? void 0 : b.isValid),
          class: ["m-phone-number-input__input maz-flex-1", {
            "--border-radius": !e.noCountrySelector,
            "--error": e.error || !((O = s.value) != null && O.isValid),
            "--focused": N.value
          }],
          onFocus: l[2] || (l[2] = (k) => N.value = !0),
          onBlur: l[3] || (l[3] = (k) => N.value = !1),
          "onUpdate:modelValue": l[4] || (l[4] = (k) => ce(k))
        }), null, 16, ["id", "model-value", "label", "disabled", "color", "error", "size", "success", "class"])
      ], 14, Vt);
    };
  }
}), Pt = /* @__PURE__ */ Pe(xt, [["__scopeId", "data-v-38502e76"]]);
export {
  Pt as M,
  Pe as _,
  Ae as u
};
