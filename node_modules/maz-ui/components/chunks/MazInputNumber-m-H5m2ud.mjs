import "../assets/MazInputNumber.css";
import { defineComponent as O, defineAsyncComponent as B, useAttrs as te, useSlots as F, onBeforeMount as ne, computed as l, openBlock as u, createBlock as x, resolveDynamicComponent as ae, normalizeClass as p, withCtx as N, createElementBlock as v, renderSlot as w, unref as d, createCommentVNode as c, createElementVNode as V, ref as T, getCurrentInstance as le, onMounted as oe, normalizeStyle as R, createVNode as z, withDirectives as ie, mergeProps as U, toHandlers as re, vModelDynamic as ue, createTextVNode as se, toDisplayString as de, withModifiers as D, withKeys as q } from "vue";
const ce = /* @__PURE__ */ O({
  __name: "MazBtn",
  props: {
    variant: {
      type: String,
      default: "button",
      validator: (e) => ["button", "link"].includes(e)
    },
    size: {
      type: String,
      default: "md",
      validator: (e) => ["mini", "xs", "sm", "md", "lg", "xl"].includes(e)
    },
    color: {
      type: String,
      default: "primary"
    },
    type: {
      type: String,
      default: "button",
      validator: (e) => ["button", "submit", "reset"].includes(e)
    },
    rounded: { type: Boolean, default: !1 },
    noRounded: { type: Boolean, default: !1 },
    outline: { type: Boolean, default: !1 },
    pastel: { type: Boolean, default: !1 },
    block: { type: Boolean, default: !1 },
    noUnderline: { type: Boolean, default: !1 },
    noLeading: { type: Boolean, default: !1 },
    loading: { type: Boolean, default: !1 },
    disabled: { type: Boolean, default: !1 },
    fab: { type: Boolean, default: !1 },
    icon: { type: String, default: void 0 },
    leftIcon: { type: String, default: void 0 },
    rightIcon: { type: String, default: void 0 },
    noPadding: { type: Boolean, default: !1 },
    noElevation: { type: Boolean, default: !1 }
  },
  setup(e) {
    const s = B(() => import("./MazSpinner-mURNBzAj.mjs")), n = B(() => import("./MazIcon-RrJDzX3V.mjs")), { href: b, to: r } = te(), $ = F(), i = e;
    ne(() => {
      i.icon && !i.fab && console.error('[maz-ui](MazBtn) the prop "icon" must be used only with "fab" props');
    });
    const t = l(() => b ? "a" : r ? "router-link" : "button"), m = l(
      () => i.pastel ? `--${i.color}-pastel` : i.outline ? `--${i.color}-outline` : `--${i.color}`
    ), f = l(
      () => (i.loading || i.disabled) && t.value === "button"
    ), y = l(() => f.value ? "--cursor-default" : "--cursor-pointer"), I = l(() => `--is-${i.variant}`), g = l(() => i.loading && i.variant === "button"), o = l(() => !!$["left-icon"] || i.leftIcon), k = l(() => !!$["right-icon"] || i.rightIcon), C = l(() => o.value || k.value), P = l(() => i.fab && i.icon), M = l(() => t.value === "button" ? i.type : void 0);
    return (S, j) => (u(), x(ae(t.value), {
      disabled: f.value,
      class: p(["m-btn", [
        `--${e.size}`,
        m.value,
        y.value,
        I.value,
        {
          "--block": e.block,
          "--no-underline": e.noUnderline,
          "--no-leading": e.noLeading,
          "--fab": e.fab,
          "--loading": e.loading,
          "--disabled": f.value,
          "--icon": C.value,
          "--rounded": e.rounded,
          "--no-rounded": e.noRounded,
          "--no-padding": e.noPadding,
          "--no-elevation": e.noElevation
        }
      ]]),
      type: M.value
    }, {
      default: N(() => [
        o.value ? (u(), v(
          "div",
          {
            key: 0,
            class: p(["m-btn__icon-left maz-flex maz-flex-center", { "maz-invisible": g.value }])
          },
          [
            w(S.$slots, "left-icon", {}, () => [
              e.leftIcon ? (u(), x(d(n), {
                key: 0,
                name: e.leftIcon
              }, null, 8, ["name"])) : c("v-if", !0)
            ], !0)
          ],
          2
          /* CLASS */
        )) : c("v-if", !0),
        P.value ? (u(), v(
          "div",
          {
            key: 1,
            class: p(["m-btn__icon maz-flex maz-flex-center", { "maz-invisible": g.value }])
          },
          [
            w(S.$slots, "icon", {}, () => [
              e.icon ? (u(), x(d(n), {
                key: 0,
                name: e.icon
              }, null, 8, ["name"])) : c("v-if", !0)
            ], !0)
          ],
          2
          /* CLASS */
        )) : c("v-if", !0),
        V(
          "span",
          {
            class: p(["maz-flex maz-flex-center", { "maz-invisible": g.value }])
          },
          [
            w(S.$slots, "default", {}, void 0, !0)
          ],
          2
          /* CLASS */
        ),
        k.value ? (u(), v(
          "div",
          {
            key: 2,
            class: p(["m-btn__icon-right maz-flex maz-flex-center", { "maz-invisible": g.value }])
          },
          [
            w(S.$slots, "right-icon", {}, () => [
              e.rightIcon ? (u(), x(d(n), {
                key: 0,
                name: e.rightIcon
              }, null, 8, ["name"])) : c("v-if", !0)
            ], !0)
          ],
          2
          /* CLASS */
        )) : c("v-if", !0),
        g.value ? (u(), x(d(s), {
          key: 3,
          size: "2em",
          color: e.color,
          class: "maz-absolute"
        }, null, 8, ["color"])) : c("v-if", !0)
      ]),
      _: 3
      /* FORWARDED */
    }, 8, ["disabled", "class", "type"]));
  }
}), K = (e, s) => {
  const n = e.__vccOpts || e;
  for (const [b, r] of s)
    n[b] = r;
  return n;
}, E = /* @__PURE__ */ K(ce, [["__scopeId", "data-v-3f2db58e"]]), me = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: E
}, Symbol.toStringTag, { value: "Module" }));
function Y(e, s) {
  let n;
  return function(...b) {
    clearTimeout(n), n = setTimeout(() => {
      e.apply(this, b);
    }, s);
  };
}
const fe = ({
  componentName: e,
  instance: s,
  providedId: n
}) => l(() => n ?? `${e}-${s == null ? void 0 : s.uid}`), ve = {
  key: 0,
  class: "m-input-wrapper-left"
}, be = { class: "m-input-wrapper-input" }, ye = ["id", "type", "name", "placeholder", "aria-label", "disabled", "readonly", "required"], ge = { key: 0 }, he = {
  key: 1,
  class: "m-input-wrapper-right"
}, pe = /* @__PURE__ */ O({
  inheritAttrs: !1,
  __name: "MazInput",
  props: {
    style: {
      type: [String, Array, Object],
      default: void 0
    },
    class: {
      type: [String, Array, Object],
      default: void 0
    },
    modelValue: {
      type: [String, Number, Boolean],
      default: void 0
    },
    placeholder: { type: String, default: void 0 },
    color: {
      type: String,
      default: "primary"
    },
    label: { type: String, default: void 0 },
    name: { type: String, default: "input" },
    type: {
      type: String,
      default: "text",
      validator: (e) => [
        "text",
        "date",
        "number",
        "tel",
        "search",
        "url",
        "password",
        "month",
        "time",
        "week",
        "email"
      ].includes(e)
    },
    required: { type: Boolean, default: !1 },
    disabled: { type: Boolean, default: !1 },
    readonly: { type: Boolean, default: !1 },
    id: { type: String, default: void 0 },
    error: { type: Boolean, default: !1 },
    success: { type: Boolean, default: !1 },
    warning: { type: Boolean, default: !1 },
    hint: { type: String, default: void 0 },
    inputClasses: { type: String, default: void 0 },
    noBorder: { type: Boolean, default: !1 },
    noRadius: { type: Boolean, default: !1 },
    size: {
      type: String,
      default: "md",
      validator: (e) => ["mini", "xs", "sm", "md", "lg", "xl"].includes(e)
    },
    debounce: { type: Boolean, default: !1 },
    debounceDelay: { type: Number, default: 500 },
    validButton: { type: Boolean, default: !1 },
    validButtonLoading: { type: Boolean, default: !1 },
    autoFocus: { type: Boolean, default: !1 },
    borderActive: { type: Boolean, default: !1 },
    leftIcon: { type: String, default: void 0 },
    rightIcon: { type: String, default: void 0 }
  },
  emits: ["focus", "blur", "update:model-value", "click", "change", "update"],
  setup(e, { emit: s }) {
    const n = B(() => Promise.resolve().then(() => me)), b = B(() => import("./MazIcon-RrJDzX3V.mjs")), r = B(() => import("./eye-slash-UoWe3WK1.mjs")), $ = B(() => import("./eye-3jm1b22X.mjs")), i = B(() => import("./check-JxWJRZYz.mjs")), t = e, m = s, f = T(!1), y = T(!1), I = T(), g = le(), o = fe({
      componentName: "MazInput",
      instance: g,
      providedId: t.id
    });
    oe(() => {
      var a;
      t.autoFocus && ((a = I.value) == null || a.focus());
    });
    const k = l(() => t.type === "password"), C = l(() => f.value ? "text" : t.type), P = l(() => {
      if (!t.noBorder) {
        if (t.error)
          return "maz-border-danger";
        if (t.success)
          return "maz-border-success";
        if (t.warning)
          return "maz-border-warning";
        if (y.value || t.borderActive) {
          if (t.color === "black")
            return "maz-border-black";
          if (t.color === "danger")
            return "maz-border-danger";
          if (t.color === "info")
            return "maz-border-info";
          if (t.color === "primary")
            return "maz-border-primary";
          if (t.color === "secondary")
            return "maz-border-secondary";
          if (t.color === "success")
            return "maz-border-success";
          if (t.color === "warning")
            return "maz-border-warning";
          if (t.color === "white")
            return "maz-border-white";
        }
        return "--default-border";
      }
    }), M = F(), S = l(() => {
      const { required: a, placeholder: h } = t;
      if (h)
        return a ? `${h} *` : h;
    }), j = l(() => t.modelValue !== void 0 && t.modelValue !== ""), L = l({
      get: () => t.modelValue,
      set: (a) => ee(a)
    }), G = l(() => (!!t.label || !!t.hint) && (y.value || !!j.value || !!t.placeholder || ["date", "month", "week"].includes(t.type))), H = l(() => !!t.label || !!t.hint), J = () => !!M["right-icon"] || k.value || !!M["valid-button"] || t.validButton || !!t.rightIcon, Q = () => !!M["left-icon"] || !!t.leftIcon, W = (a) => {
      m("focus", a), y.value = !0;
    }, X = (a) => {
      m("blur", a), y.value = !1;
    }, Z = (a) => m("change", a), _ = Y((a) => {
      m("update:model-value", a);
    }, t.debounceDelay), ee = (a) => {
      if (t.debounce)
        return _(a);
      m("update:model-value", a);
    };
    return (a, h) => (u(), v(
      "div",
      {
        class: p(["m-input", [
          {
            "--is-focused": y.value || e.borderActive,
            "--should-up": G.value,
            "--has-label": H.value,
            "--is-disabled": e.disabled,
            "--is-readonly": e.readonly,
            "--has-z-2": e.error || e.warning || e.success,
            "--has-state": e.error || e.warning || e.success
          },
          t.class,
          `--${e.color}`,
          `--${e.size}`
        ]]),
        style: R(e.style)
      },
      [
        V(
          "div",
          {
            class: p(["m-input-wrapper", [e.inputClasses, P.value, { "maz-rounded": !e.noRadius }]])
          },
          [
            Q() ? (u(), v("div", ve, [
              a.$slots["left-icon"] || e.leftIcon ? w(a.$slots, "left-icon", { key: 0 }, () => [
                z(d(b), {
                  name: e.leftIcon,
                  class: "maz-text-xl maz-text-muted"
                }, null, 8, ["name"])
              ], !0) : c("v-if", !0)
            ])) : c("v-if", !0),
            V("div", be, [
              ie(V("input", U({
                id: d(o),
                ref_key: "input",
                ref: I,
                "onUpdate:modelValue": h[0] || (h[0] = (A) => L.value = A),
                type: C.value,
                name: e.name
              }, a.$attrs, {
                placeholder: S.value,
                "aria-label": e.label || e.placeholder,
                disabled: e.disabled,
                readonly: e.readonly,
                required: e.required,
                class: "m-input-input"
              }, re({
                blur: X,
                focus: W,
                change: Z
              }, !0), {
                onClick: h[1] || (h[1] = (A) => a.$emit("click", A))
              }), null, 16, ye), [
                [ue, L.value]
              ]),
              e.label || e.hint ? (u(), v(
                "span",
                {
                  key: 0,
                  ref: "label",
                  class: p(["m-input-label", [
                    {
                      "maz-text-danger-600": e.error,
                      "maz-text-success-600": e.success,
                      "maz-text-warning-600": e.warning
                    }
                  ]])
                },
                [
                  se(
                    de(e.hint || e.label) + " ",
                    1
                    /* TEXT */
                  ),
                  e.required ? (u(), v("sup", ge, "*")) : c("v-if", !0)
                ],
                2
                /* CLASS */
              )) : c("v-if", !0)
            ]),
            J() ? (u(), v("div", he, [
              a.$slots["right-icon"] || e.rightIcon ? w(a.$slots, "right-icon", { key: 0 }, () => [
                z(d(b), {
                  name: e.rightIcon,
                  class: "maz-text-xl maz-text-muted"
                }, null, 8, ["name"])
              ], !0) : c("v-if", !0),
              k.value ? (u(), x(d(n), {
                key: 1,
                color: "transparent",
                tabindex: "-1",
                size: "mini",
                onClick: h[2] || (h[2] = D((A) => f.value = !f.value, ["stop"]))
              }, {
                default: N(() => [
                  f.value ? (u(), x(d(r), {
                    key: 0,
                    class: "maz-text-xl maz-text-muted"
                  })) : (u(), x(d($), {
                    key: 1,
                    class: "maz-text-xl maz-text-muted"
                  }))
                ]),
                _: 1
                /* STABLE */
              })) : c("v-if", !0),
              a.$slots["valid-button"] || e.validButton ? w(a.$slots, "valid-button", { key: 2 }, () => [
                z(d(n), {
                  color: "transparent",
                  disabled: e.disabled,
                  tabindex: "-1",
                  loading: e.validButtonLoading,
                  class: "m-input-valid-button",
                  size: "mini",
                  type: "submit"
                }, {
                  default: N(() => [
                    z(d(i), { class: "maz-text-2xl maz-text-normal" })
                  ]),
                  _: 1
                  /* STABLE */
                }, 8, ["disabled", "loading"])
              ], !0) : c("v-if", !0)
            ])) : c("v-if", !0)
          ],
          2
          /* CLASS */
        )
      ],
      6
      /* CLASS, STYLE */
    ));
  }
}), ze = /* @__PURE__ */ K(pe, [["__scopeId", "data-v-acaa27d2"]]), ke = {
  xmlns: "http://www.w3.org/2000/svg",
  width: "1em",
  height: "1em",
  fill: "none",
  viewBox: "0 0 24 24"
}, xe = /* @__PURE__ */ V(
  "path",
  {
    stroke: "currentColor",
    "stroke-linecap": "round",
    "stroke-linejoin": "round",
    "stroke-width": "1.5",
    d: "M12 4.5v15m7.5-7.5h-15"
  },
  null,
  -1
  /* HOISTED */
), Ie = [
  xe
];
function Be(e, s) {
  return u(), v("svg", ke, [...Ie]);
}
const we = { render: Be }, $e = {
  xmlns: "http://www.w3.org/2000/svg",
  width: "1em",
  height: "1em",
  fill: "none",
  viewBox: "0 0 24 24"
}, Se = /* @__PURE__ */ V(
  "path",
  {
    stroke: "currentColor",
    "stroke-linecap": "round",
    "stroke-linejoin": "round",
    "stroke-width": "1.5",
    d: "M19.5 12h-15"
  },
  null,
  -1
  /* HOISTED */
), Ve = [
  Se
];
function Ce(e, s) {
  return u(), v("svg", $e, [...Ve]);
}
const Me = { render: Ce }, Pe = /* @__PURE__ */ O({
  inheritAttrs: !1,
  __name: "MazInputNumber",
  props: {
    style: {
      type: [String, Array, Object],
      default: void 0
    },
    class: {
      type: [String, Array, Object],
      default: void 0
    },
    modelValue: { type: Number, default: void 0 },
    disabled: { type: Boolean, default: !1 },
    max: { type: Number, default: Number.POSITIVE_INFINITY },
    min: { type: Number, default: Number.NEGATIVE_INFINITY },
    step: { type: Number, default: 1 },
    size: {
      type: String,
      default: "md",
      validator: (e) => ["mini", "xs", "sm", "md", "lg", "xl"].includes(e)
    }
  },
  emits: ["update:model-value"],
  setup(e, { emit: s }) {
    const n = e, b = s, r = l({
      get: () => n.modelValue,
      set: (o) => m(o)
    });
    function $(o) {
      return Math.round(o / n.step) * n.step;
    }
    const i = (o) => {
      if (typeof o == "number")
        return o <= n.min ? n.min : o >= n.max ? n.max : $(o);
    }, t = Y((o) => m(o), 300), m = (o) => {
      o = i(o), r.value !== o && b("update:model-value", o);
    };
    m(r.value);
    const f = l(() => n.modelValue && n.modelValue >= n.max), y = l(() => n.modelValue && n.modelValue <= n.min), I = () => {
      if (!(n.disabled || f.value)) {
        if (r.value === void 0 || r.value === null) {
          r.value = n.min;
          return;
        }
        r.value = r.value + 1 * n.step;
      }
    }, g = () => {
      if (!(n.disabled || y.value)) {
        if (r.value === void 0 || r.value === null) {
          r.value = n.min;
          return;
        }
        r.value = r.value - 1 * n.step;
      }
    };
    return (o, k) => (u(), v(
      "div",
      {
        class: p(["m-input-number maz-align-center", [`m-input-number--${e.size}`, n.class]]),
        style: R(e.style)
      },
      [
        z(E, {
          color: "transparent",
          size: e.size,
          tabindex: "-1",
          class: "m-input-number__button m-input-number__decrement-button",
          disabled: y.value || e.disabled,
          onClick: g
        }, {
          default: N(() => [
            z(d(Me), { class: "m-input-number__button__icon" })
          ]),
          _: 1
          /* STABLE */
        }, 8, ["size", "disabled"]),
        z(ze, U({
          "model-value": r.value,
          type: "number",
          class: "m-input-number__input maz-flex-1",
          disabled: e.disabled,
          min: e.min,
          max: e.max,
          step: e.step
        }, o.$attrs, {
          size: e.size,
          onKeydown: [
            q(D(I, ["prevent"]), ["up"]),
            q(D(g, ["prevent"]), ["down"])
          ],
          "onUpdate:modelValue": k[0] || (k[0] = (C) => d(t)(C))
        }), null, 16, ["model-value", "disabled", "min", "max", "step", "size", "onKeydown"]),
        z(E, {
          color: "transparent",
          "no-shadow": "",
          tabindex: "-1",
          size: e.size,
          class: "m-input-number__button m-input-number__increment-button",
          disabled: f.value || e.disabled,
          onClick: I
        }, {
          default: N(() => [
            z(d(we), { class: "m-input-number__button__icon" })
          ]),
          _: 1
          /* STABLE */
        }, 8, ["size", "disabled"])
      ],
      6
      /* CLASS, STYLE */
    ));
  }
});
export {
  K as _,
  Pe as a
};
