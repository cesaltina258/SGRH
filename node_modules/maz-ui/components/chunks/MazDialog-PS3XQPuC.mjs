import "../assets/MazDialog.css";
import { defineComponent as $, ref as w, onMounted as z, watch as M, openBlock as c, createBlock as v, Teleport as T, createVNode as S, Transition as V, withCtx as y, createElementBlock as k, normalizeClass as b, createElementVNode as u, withModifiers as O, mergeProps as g, renderSlot as m, createCommentVNode as i, defineAsyncComponent as h, useAttrs as N, computed as B, createTextVNode as F, toDisplayString as P, unref as E } from "vue";
const D = "--backdrop-present", H = () => {
  document.documentElement.classList.add(D);
}, K = async () => {
  document.querySelector(".m-backdrop.--present") || document.documentElement.classList.remove(D);
}, W = $({
  inheritAttrs: !1,
  props: {
    modelValue: { type: Boolean, default: !1 },
    teleportSelector: { type: String, default: "body" },
    beforeClose: {
      // eslint-disable-next-line @typescript-eslint/ban-types
      type: Function,
      default: void 0
    },
    persistent: { type: Boolean, default: !1 },
    noCloseOnEscKey: { type: Boolean, default: !1 },
    transitionName: { type: String, default: "backdrop-anim" },
    backdropClass: { type: [Array, String, Object], default: void 0 },
    backdropContentClass: {
      type: [Array, String, Object],
      default: void 0
    }
  },
  emits: ["open", "before-close", "close", "update:model-value"],
  setup(e, { emit: n }) {
    const l = w(e.modelValue), a = () => {
      d(!1);
    }, d = async (r) => {
      var A;
      r || (n("before-close"), await ((A = e.beforeClose) == null ? void 0 : A.call(e))), l.value = r;
    }, f = () => {
      n("open");
    }, t = () => {
      n("update:model-value", !1), n("close"), p();
    }, s = () => {
      e.persistent || a();
    }, o = (r) => {
      !e.noCloseOnEscKey && r.key === "Escape" && !e.persistent && a();
    }, C = () => {
      H(), document.addEventListener("keyup", o, !1);
    }, p = () => {
      document.removeEventListener("keyup", o), K();
    };
    return z(() => {
      e.modelValue ? C() : p();
    }), M(
      () => e.modelValue,
      (r) => {
        l.value = r, r ? C() : p();
      }
    ), {
      onBackdropAnimationEnter: f,
      onBackdropAnimationLeave: t,
      onBackdropClicked: s,
      close: a,
      present: l,
      toggleModal: d,
      onKeyPress: o
    };
  }
}), L = (e, n) => {
  const l = e.__vccOpts || e;
  for (const [a, d] of n)
    l[a] = d;
  return l;
};
function j(e, n, l, a, d, f) {
  return c(), v(T, { to: e.teleportSelector }, [
    S(V, {
      appear: "",
      name: e.transitionName,
      onAfterEnter: e.onBackdropAnimationEnter,
      onAfterLeave: e.onBackdropAnimationLeave
    }, {
      default: y(() => [
        e.present ? (c(), k(
          "div",
          {
            key: 0,
            class: b(["m-backdrop --present", [e.backdropClass]]),
            tabindex: "-1",
            role: "dialog"
          },
          [
            u(
              "button",
              {
                class: b(["m-backdrop-overlay", { "--disabled": e.persistent }]),
                tabindex: "-1",
                onClick: n[0] || (n[0] = O((...t) => e.onBackdropClicked && e.onBackdropClicked(...t), ["self"]))
              },
              null,
              2
              /* CLASS */
            ),
            u(
              "div",
              g({
                class: ["m-backdrop-content", e.backdropContentClass]
              }, e.$attrs, {
                role: "document",
                tabindex: "0"
              }),
              [
                m(e.$slots, "default", { close: e.close })
              ],
              16
              /* FULL_PROPS */
            )
          ],
          2
          /* CLASS */
        )) : i("v-if", !0)
      ]),
      _: 3
      /* FORWARDED */
    }, 8, ["name", "onAfterEnter", "onAfterLeave"])
  ], 8, ["to"]);
}
const I = /* @__PURE__ */ L(W, [["render", j]]), q = {
  key: 0,
  id: "dialogTitle",
  class: "maz-my-0 maz-text-xl maz-font-semibold"
}, U = {
  id: "dialogDesc",
  class: "m-dialog-content"
}, X = {
  key: 0,
  class: "m-dialog-footer"
}, G = /* @__PURE__ */ $({
  __name: "MazDialog",
  props: {
    /** Modal's title in  header */
    title: { type: String, default: void 0 },
    /** Remove the close button in header */
    noClose: { type: Boolean, default: !1 },
    /** Modal's width */
    width: { type: String, default: "500px" },
    /** Modal's max-width */
    maxWidth: { type: String, default: "95vw" },
    /** Modal's max-height */
    maxHeight: { type: String, default: "95vh" },
    /**  Modal's content becomes scrollable - warning: a overflow is applied */
    scrollable: { type: Boolean, default: !1 }
  },
  emits: [
    /** Model binding */
    "update:model-value",
    /** Emitted when dialog is closed (after animation) */
    "close",
    /** Emitted when dialog is opened (after animation) */
    "open"
  ],
  setup(e) {
    const n = h(() => import("./MazBtn-7F9Rioiz.mjs")), l = h(() => import("./x-mark-pPwcH6Hz.mjs")), a = N(), d = B(() => ({
      ...a,
      class: void 0,
      style: void 0
    })), f = B(() => ({
      class: a.class,
      style: a.style
    }));
    return (t, s) => (c(), v(
      I,
      g(d.value, {
        "transition-name": "modal-anim",
        "aria-labelledby": "dialogTitle",
        "aria-describedby": "dialogDesc",
        onClose: s[0] || (s[0] = (o) => t.$emit("close", o)),
        onOpen: s[1] || (s[1] = (o) => t.$emit("open", o)),
        "onUpdate:modelValue": s[2] || (s[2] = (o) => t.$emit("update:model-value", o))
      }),
      {
        default: y(({ close: o }) => [
          u(
            "div",
            g({
              class: ["m-dialog", { "--scrollable": e.scrollable }],
              role: "dialog",
              "aria-modal": "true",
              style: [{ width: e.width, maxWidth: e.maxWidth, maxHeight: e.maxHeight }]
            }, f.value),
            [
              i(`
          @slot Header slot
            @binding {Function} close close function
        `),
              m(t.$slots, "header", { close: o }, () => [
                u(
                  "div",
                  {
                    class: b(["m-dialog-header", { "--has-title": t.$slots.title || e.title }])
                  },
                  [
                    t.$slots.title || e.title ? (c(), k("h2", q, [
                      i(`
                @slot Title slot in the header
              `),
                      m(t.$slots, "title", {}, () => [
                        F(
                          P(e.title),
                          1
                          /* TEXT */
                        )
                      ], !0)
                    ])) : i("v-if", !0),
                    e.noClose ? i("v-if", !0) : (c(), v(E(n), {
                      key: 1,
                      class: "m-dialog-closebtn",
                      color: "transparent",
                      onClick: o
                    }, {
                      default: y(() => [
                        S(E(l), { class: "maz-text-lg" })
                      ]),
                      _: 2
                      /* DYNAMIC */
                    }, 1032, ["onClick"]))
                  ],
                  2
                  /* CLASS */
                )
              ], !0),
              u("div", U, [
                i(`
            @slot Default content
              @binding {Function} close close function
          `),
                m(t.$slots, "default", { close: o }, void 0, !0)
              ]),
              t.$slots.footer ? (c(), k("div", X, [
                i(`
            @slot Footer slot
              @binding {Function} close close function
          `),
                m(t.$slots, "footer", { close: o }, void 0, !0)
              ])) : i("v-if", !0)
            ],
            16
            /* FULL_PROPS */
          )
        ]),
        _: 3
        /* FORWARDED */
      },
      16
      /* FULL_PROPS */
    ));
  }
}), R = /* @__PURE__ */ L(G, [["__scopeId", "data-v-a9f3580e"]]);
export {
  R as M,
  L as _
};
