import { type PropType } from 'vue';
import type { Color, ModelValueSimple, Position, Size } from './types';
export type MazSelectOption = Record<string, ModelValueSimple>;
export type { Color, Size, ModelValueSimple, Position };
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    style: {
        type: PropType<import("vue").StyleValue>;
        default: undefined;
    };
    class: {
        type: PropType<any>;
        default: undefined;
    };
    modelValue: {
        type: PropType<ModelValueSimple | ModelValueSimple[]>;
        default: undefined;
    };
    id: {
        type: StringConstructor;
        default: undefined;
    };
    options: {
        type: PropType<MazSelectOption[]>;
        default: undefined;
    };
    optionValueKey: {
        type: StringConstructor;
        default: string;
    };
    optionLabelKey: {
        type: StringConstructor;
        default: string;
    };
    optionInputValueKey: {
        type: StringConstructor;
        default: string;
    };
    listPosition: {
        type: PropType<Position>;
        default: string;
        validator: (value: Position) => boolean;
    };
    required: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    open: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Choose color of the input */
    color: {
        type: PropType<Color>;
        default: string;
    };
    /** Choose the option list item height */
    itemHeight: {
        type: NumberConstructor;
        default: number;
    };
    maxListHeight: {
        type: NumberConstructor;
        default: number;
    };
    /** Add max-width value to option list */
    maxListWidth: {
        type: NumberConstructor;
        default: undefined;
    };
    /** Choose size of the input */
    size: {
        type: PropType<Size>;
        default: string;
        validator: (value: string) => boolean;
    };
    /** Display search input in option list */
    search: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Search input placeholder */
    searchPlaceholder: {
        type: StringConstructor;
        default: string;
    };
    /** Enable feature to select multiple values */
    multiple: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    close: (...args: any[]) => void;
    blur: (...args: any[]) => void;
    change: (...args: any[]) => void;
    focus: (...args: any[]) => void;
    open: (...args: any[]) => void;
    "update:model-value": (...args: any[]) => void;
    "selected-option": (...args: any[]) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    style: {
        type: PropType<import("vue").StyleValue>;
        default: undefined;
    };
    class: {
        type: PropType<any>;
        default: undefined;
    };
    modelValue: {
        type: PropType<ModelValueSimple | ModelValueSimple[]>;
        default: undefined;
    };
    id: {
        type: StringConstructor;
        default: undefined;
    };
    options: {
        type: PropType<MazSelectOption[]>;
        default: undefined;
    };
    optionValueKey: {
        type: StringConstructor;
        default: string;
    };
    optionLabelKey: {
        type: StringConstructor;
        default: string;
    };
    optionInputValueKey: {
        type: StringConstructor;
        default: string;
    };
    listPosition: {
        type: PropType<Position>;
        default: string;
        validator: (value: Position) => boolean;
    };
    required: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    open: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Choose color of the input */
    color: {
        type: PropType<Color>;
        default: string;
    };
    /** Choose the option list item height */
    itemHeight: {
        type: NumberConstructor;
        default: number;
    };
    maxListHeight: {
        type: NumberConstructor;
        default: number;
    };
    /** Add max-width value to option list */
    maxListWidth: {
        type: NumberConstructor;
        default: undefined;
    };
    /** Choose size of the input */
    size: {
        type: PropType<Size>;
        default: string;
        validator: (value: string) => boolean;
    };
    /** Display search input in option list */
    search: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Search input placeholder */
    searchPlaceholder: {
        type: StringConstructor;
        default: string;
    };
    /** Enable feature to select multiple values */
    multiple: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & {
    onFocus?: ((...args: any[]) => any) | undefined;
    onBlur?: ((...args: any[]) => any) | undefined;
    onChange?: ((...args: any[]) => any) | undefined;
    onClose?: ((...args: any[]) => any) | undefined;
    onOpen?: ((...args: any[]) => any) | undefined;
    "onUpdate:model-value"?: ((...args: any[]) => any) | undefined;
    "onSelected-option"?: ((...args: any[]) => any) | undefined;
}, {
    size: Size;
    color: Color;
    style: import("vue").StyleValue;
    class: any;
    search: boolean;
    disabled: boolean;
    multiple: boolean;
    required: boolean;
    id: string;
    open: boolean;
    modelValue: ModelValueSimple | ModelValueSimple[];
    options: MazSelectOption[];
    optionValueKey: string;
    optionLabelKey: string;
    optionInputValueKey: string;
    listPosition: Position;
    itemHeight: number;
    maxListHeight: number;
    maxListWidth: number;
    searchPlaceholder: string;
}, {}>, {
    "no-results"?(_: {}): any;
    default?(_: {
        option: MazSelectOption;
        isSelected: boolean;
    }): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
