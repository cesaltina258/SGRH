import "./assets/MazRadio.css";
import { computed as n, defineComponent as g, useCssVars as h, getCurrentInstance as k, openBlock as z, createElementBlock as x, unref as f, normalizeClass as I, normalizeStyle as C, createElementVNode as i, mergeProps as V, renderSlot as w, pushScopeId as B, popScopeId as q } from "vue";
const M = ({
  componentName: e,
  instance: o,
  providedId: r
}) => n(() => r ?? `${e}-${o == null ? void 0 : o.uid}`), O = (e) => (B("data-v-ae1a6991"), e = e(), q(), e), j = ["for", "aria-checked"], A = ["id", "value", "disabled", "name", "checked"], E = /* @__PURE__ */ O(() => /* @__PURE__ */ i(
  "span",
  null,
  [
    /* @__PURE__ */ i("span", { class: "round" })
  ],
  -1
  /* HOISTED */
)), N = /* @__PURE__ */ g({
  __name: "MazRadio",
  props: {
    style: {
      type: [String, Array, Object],
      default: void 0
    },
    class: {
      type: [String, Array, Object],
      default: void 0
    },
    modelValue: { type: String, default: void 0 },
    value: { type: String, required: !0 },
    name: { type: String, required: !0 },
    id: { type: String, default: void 0 },
    color: {
      type: String,
      default: "primary"
    },
    size: { type: String, default: "md" },
    disabled: { type: Boolean, default: !1 }
  },
  emits: [
    /* emitted when value change */
    "update:model-value",
    /* emited when value change */
    "change"
  ],
  setup(e, { emit: o }) {
    h((t) => ({
      "6b5919b7": v.value,
      "702feedc": y.value,
      "8c56f256": S.value
    }));
    const r = k(), a = e, s = o, u = M({
      componentName: "MazCheckbox",
      instance: r,
      providedId: a.id
    }), c = n(() => a.modelValue === a.value), v = n(() => {
      switch (a.size) {
        case "xl":
          return "2.25rem";
        case "lg":
          return "2rem";
        default:
          return "1.625rem";
        case "sm":
          return "1.425rem";
        case "xs":
          return "1.325rem";
        case "mini":
          return "1.2rem";
      }
    }), y = n(() => `var(--maz-color-${a.color})`), S = n(
      () => ["black", "transparent"].includes(a.color) ? "var(--maz-color-muted)" : `var(--maz-color-${a.color}-alpha)`
    );
    function b(t, d) {
      ["Space"].includes(t.code) && (t.preventDefault(), m(d));
    }
    function m(t) {
      s("update:model-value", t), s("change", t);
    }
    return (t, d) => (z(), x("label", {
      for: f(u),
      class: I(["m-checkbox", [{ "--disabled": e.disabled, "--selected": c.value }, a.class]]),
      tabindex: "0",
      role: "radio",
      style: C(e.style),
      "aria-checked": c.value,
      onKeydown: d[1] || (d[1] = (l) => b(l, e.value))
    }, [
      i("input", V({
        id: f(u),
        value: e.value
      }, t.$attrs, {
        tabindex: "-1",
        disabled: e.disabled,
        name: e.name,
        type: "radio",
        checked: c.value,
        onChange: d[0] || (d[0] = (l) => {
          var p;
          return m((p = l == null ? void 0 : l.target) == null ? void 0 : p.value);
        })
      }), null, 16, A),
      E,
      w(t.$slots, "default", {}, void 0, !0)
    ], 46, j));
  }
}), R = (e, o) => {
  const r = e.__vccOpts || e;
  for (const [a, s] of o)
    r[a] = s;
  return r;
}, D = /* @__PURE__ */ R(N, [["__scopeId", "data-v-ae1a6991"]]);
export {
  D as default
};
