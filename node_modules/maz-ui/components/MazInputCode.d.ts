import { type PropType } from 'vue';
import type { Color } from './types';
export type { Color } from './types';
declare const _default: import("vue").DefineComponent<{
    style: {
        type: PropType<import("vue").StyleValue>;
        default: undefined;
    };
    class: {
        type: PropType<any>;
        default: undefined;
    };
    /** Is v-model */
    modelValue: {
        type: PropType<string | number>;
        default: undefined;
    };
    /** Choose the length of the code */
    codeLength: {
        type: NumberConstructor;
        default: number;
    };
    /** Is the returned type (number works only when accept-alpha is not enable) */
    type: {
        type: PropType<"number" | "text">;
        default: string;
    };
    /** Turn it to true to accept alpha charac */
    acceptAlpha: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** make inputs required */
    required: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** make inputs required */
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** When is `true` the input has the error style (danger color) */
    error: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** When is `true` the input has the success style (success color) */
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** When is `true` the input has the warning style (warning color) */
    warning: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Predefined size of component */
    size: {
        type: PropType<"sm" | "md" | "lg">;
        default: string;
    };
    /** Color of component */
    color: {
        type: PropType<Color>;
        default: string;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:model-value": (...args: any[]) => void;
    completed: (...args: any[]) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    style: {
        type: PropType<import("vue").StyleValue>;
        default: undefined;
    };
    class: {
        type: PropType<any>;
        default: undefined;
    };
    /** Is v-model */
    modelValue: {
        type: PropType<string | number>;
        default: undefined;
    };
    /** Choose the length of the code */
    codeLength: {
        type: NumberConstructor;
        default: number;
    };
    /** Is the returned type (number works only when accept-alpha is not enable) */
    type: {
        type: PropType<"number" | "text">;
        default: string;
    };
    /** Turn it to true to accept alpha charac */
    acceptAlpha: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** make inputs required */
    required: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** make inputs required */
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** When is `true` the input has the error style (danger color) */
    error: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** When is `true` the input has the success style (success color) */
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** When is `true` the input has the warning style (warning color) */
    warning: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Predefined size of component */
    size: {
        type: PropType<"sm" | "md" | "lg">;
        default: string;
    };
    /** Color of component */
    color: {
        type: PropType<Color>;
        default: string;
    };
}>> & {
    "onUpdate:model-value"?: ((...args: any[]) => any) | undefined;
    onCompleted?: ((...args: any[]) => any) | undefined;
}, {
    success: boolean;
    warning: boolean;
    size: "sm" | "md" | "lg";
    color: Color;
    type: "number" | "text";
    style: import("vue").StyleValue;
    class: any;
    disabled: boolean;
    required: boolean;
    error: boolean;
    modelValue: string | number;
    codeLength: number;
    acceptAlpha: boolean;
}, {}>;
export default _default;
