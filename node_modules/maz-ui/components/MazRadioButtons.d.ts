import type { PropType } from 'vue';
import type { Color } from './types';
export interface ButtonsRadioOption {
    label: string;
    value: string | number;
}
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    modelValue: {
        type: (StringConstructor | NumberConstructor)[];
        default: undefined;
    };
    options: {
        type: PropType<ButtonsRadioOption[]>;
        required: true;
    };
    name: {
        type: PropType<string>;
        default: string;
    };
    color: {
        type: PropType<Color>;
        default: string;
    };
    noElevation: {
        type: BooleanConstructor;
        default: boolean;
    };
    orientation: {
        type: PropType<"col" | "row">;
        default: string;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    change: (...args: any[]) => void;
    "update:model-value": (...args: any[]) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: (StringConstructor | NumberConstructor)[];
        default: undefined;
    };
    options: {
        type: PropType<ButtonsRadioOption[]>;
        required: true;
    };
    name: {
        type: PropType<string>;
        default: string;
    };
    color: {
        type: PropType<Color>;
        default: string;
    };
    noElevation: {
        type: BooleanConstructor;
        default: boolean;
    };
    orientation: {
        type: PropType<"col" | "row">;
        default: string;
    };
}>> & {
    onChange?: ((...args: any[]) => any) | undefined;
    "onUpdate:model-value"?: ((...args: any[]) => any) | undefined;
}, {
    color: Color;
    name: string;
    noElevation: boolean;
    modelValue: string | number;
    orientation: "col" | "row";
}, {}>, {
    default?(_: {
        option: ButtonsRadioOption;
        selected: boolean;
    }): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
