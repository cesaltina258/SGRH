import type { CountryCode } from 'libphonenumber-js';
import type { Result, Translations } from './MazPhoneNumberInput/types';
import type { Color, Position, Size } from './types';
export type { Color, Size, Position, CountryCode, Result, Translations };
import { type PropType } from 'vue';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    style: {
        type: PropType<import("vue").StyleValue>;
        default: undefined;
    };
    class: {
        type: PropType<any>;
        default: undefined;
    };
    /** Country calling code + telephone number in international format */
    modelValue: {
        type: StringConstructor;
        validator: (prop: string) => boolean;
        default: undefined;
    };
    /** @deprecated */
    defaultPhoneNumber: {
        type: StringConstructor;
        default: undefined;
    };
    /** Country code selected - Ex: "FR" */
    countryCode: {
        type: PropType<string>;
        default: undefined;
        validator: (code: string) => boolean;
    };
    /** @deprecated - use country-code or v-model:country-code */
    defaultCountryCode: {
        type: PropType<string>;
        default: undefined;
        validator: (code: string) => boolean;
    };
    id: {
        type: StringConstructor;
        default: undefined;
    };
    placeholder: {
        type: StringConstructor;
        default: undefined;
    };
    /** List of country codes to place first in the select list - Ex: ['FR', 'BE', 'GE'] */
    preferredCountries: {
        type: PropType<CountryCode[]>;
        default: undefined;
    };
    /** List of country codes to be removed from the select list - Ex: ['FR', 'BE', 'GE'] */
    ignoredCountries: {
        type: PropType<CountryCode[]>;
        default: undefined;
    };
    /** List of country codes to only have the countries selected in the select list - Ex: ['FR', 'BE', 'GE'] */
    onlyCountries: {
        type: PropType<CountryCode[]>;
        default: undefined;
    };
    /** Locale strings of the component */
    translations: {
        type: PropType<{
            countrySelector: {
                placeholder: string;
                error: string;
                searchPlaceholder: string;
            };
            phoneInput: {
                placeholder: string;
                example: string;
            };
        }>;
        default: undefined;
    };
    /** Position where the list of countries will be opened */
    listPosition: {
        type: PropType<Position>;
        default: string;
        validator: (value: Position) => boolean;
    };
    /** Component color applied - Ex: "secondary" */
    color: {
        type: PropType<Color>;
        default: string;
    };
    /** Component size applied - Ex: "sm" */
    size: {
        type: PropType<Size>;
        default: string;
        validator: (value: string) => boolean;
    };
    /** Remove flags in country list */
    noFlags: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Disable input */
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** No show the phone number example */
    noExample: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Disable search input in country list */
    noSearch: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** By default the component use the browser locale to set the default country code if not country code is provided */
    noUseBrowserLocale: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** The component will make a request to get the location of the user and use it to set the default country code */
    fetchCountry: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** No show the country selector */
    noCountrySelector: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Show country calling code in the country list */
    showCodeOnList: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Replace country names */
    customCountriesList: {
        type: PropType<Record<CountryCode, string>>;
        default: undefined;
    };
    /** Disabled auto-format as you type */
    noFormattingAsYouType: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * locale of country list - Ex: "fr-FR"
     * @default {string} browser locale
     */
    countryLocale: {
        type: StringConstructor;
        default: undefined;
    };
    /** Disable validation error UI */
    noValidationError: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Disable validation success UI */
    noValidationSuccess: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Add success UI */
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Add error UI */
    error: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Will replace the calling code by the country name in the country selector */
    countrySelectorDisplayName: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Choose the width of the country selector */
    countrySelectorWidth: {
        type: StringConstructor;
        default: string;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    data: (...args: any[]) => void;
    update: (...args: any[]) => void;
    "update:model-value": (...args: any[]) => void;
    "country-code": (...args: any[]) => void;
    "update:country-code": (...args: any[]) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    style: {
        type: PropType<import("vue").StyleValue>;
        default: undefined;
    };
    class: {
        type: PropType<any>;
        default: undefined;
    };
    /** Country calling code + telephone number in international format */
    modelValue: {
        type: StringConstructor;
        validator: (prop: string) => boolean;
        default: undefined;
    };
    /** @deprecated */
    defaultPhoneNumber: {
        type: StringConstructor;
        default: undefined;
    };
    /** Country code selected - Ex: "FR" */
    countryCode: {
        type: PropType<string>;
        default: undefined;
        validator: (code: string) => boolean;
    };
    /** @deprecated - use country-code or v-model:country-code */
    defaultCountryCode: {
        type: PropType<string>;
        default: undefined;
        validator: (code: string) => boolean;
    };
    id: {
        type: StringConstructor;
        default: undefined;
    };
    placeholder: {
        type: StringConstructor;
        default: undefined;
    };
    /** List of country codes to place first in the select list - Ex: ['FR', 'BE', 'GE'] */
    preferredCountries: {
        type: PropType<CountryCode[]>;
        default: undefined;
    };
    /** List of country codes to be removed from the select list - Ex: ['FR', 'BE', 'GE'] */
    ignoredCountries: {
        type: PropType<CountryCode[]>;
        default: undefined;
    };
    /** List of country codes to only have the countries selected in the select list - Ex: ['FR', 'BE', 'GE'] */
    onlyCountries: {
        type: PropType<CountryCode[]>;
        default: undefined;
    };
    /** Locale strings of the component */
    translations: {
        type: PropType<{
            countrySelector: {
                placeholder: string;
                error: string;
                searchPlaceholder: string;
            };
            phoneInput: {
                placeholder: string;
                example: string;
            };
        }>;
        default: undefined;
    };
    /** Position where the list of countries will be opened */
    listPosition: {
        type: PropType<Position>;
        default: string;
        validator: (value: Position) => boolean;
    };
    /** Component color applied - Ex: "secondary" */
    color: {
        type: PropType<Color>;
        default: string;
    };
    /** Component size applied - Ex: "sm" */
    size: {
        type: PropType<Size>;
        default: string;
        validator: (value: string) => boolean;
    };
    /** Remove flags in country list */
    noFlags: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Disable input */
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** No show the phone number example */
    noExample: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Disable search input in country list */
    noSearch: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** By default the component use the browser locale to set the default country code if not country code is provided */
    noUseBrowserLocale: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** The component will make a request to get the location of the user and use it to set the default country code */
    fetchCountry: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** No show the country selector */
    noCountrySelector: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Show country calling code in the country list */
    showCodeOnList: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Replace country names */
    customCountriesList: {
        type: PropType<Record<CountryCode, string>>;
        default: undefined;
    };
    /** Disabled auto-format as you type */
    noFormattingAsYouType: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * locale of country list - Ex: "fr-FR"
     * @default {string} browser locale
     */
    countryLocale: {
        type: StringConstructor;
        default: undefined;
    };
    /** Disable validation error UI */
    noValidationError: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Disable validation success UI */
    noValidationSuccess: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Add success UI */
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Add error UI */
    error: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Will replace the calling code by the country name in the country selector */
    countrySelectorDisplayName: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Choose the width of the country selector */
    countrySelectorWidth: {
        type: StringConstructor;
        default: string;
    };
}>> & {
    "onUpdate:model-value"?: ((...args: any[]) => any) | undefined;
    onUpdate?: ((...args: any[]) => any) | undefined;
    onData?: ((...args: any[]) => any) | undefined;
    "onCountry-code"?: ((...args: any[]) => any) | undefined;
    "onUpdate:country-code"?: ((...args: any[]) => any) | undefined;
}, {
    success: boolean;
    size: Size;
    color: Color;
    style: import("vue").StyleValue;
    class: any;
    disabled: boolean;
    placeholder: string;
    id: string;
    error: boolean;
    modelValue: string;
    countryCode: string;
    listPosition: Position;
    defaultPhoneNumber: string;
    defaultCountryCode: string;
    preferredCountries: CountryCode[];
    ignoredCountries: CountryCode[];
    onlyCountries: CountryCode[];
    translations: {
        countrySelector: {
            placeholder: string;
            error: string;
            searchPlaceholder: string;
        };
        phoneInput: {
            placeholder: string;
            example: string;
        };
    };
    noFlags: boolean;
    noExample: boolean;
    noSearch: boolean;
    noUseBrowserLocale: boolean;
    fetchCountry: boolean;
    noCountrySelector: boolean;
    showCodeOnList: boolean;
    customCountriesList: Record<CountryCode, string>;
    noFormattingAsYouType: boolean;
    countryLocale: string;
    noValidationError: boolean;
    noValidationSuccess: boolean;
    countrySelectorDisplayName: boolean;
    countrySelectorWidth: string;
}, {}>, {
    "selector-flag"?(_: {
        countryCode: CountryCode;
    }): any;
    "country-list-flag"?(_: {
        countryCode: string;
        option: import("./MazSelect.vue").MazSelectOption;
        isSelected: boolean;
    }): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
