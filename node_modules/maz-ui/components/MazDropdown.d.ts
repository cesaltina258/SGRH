import { type RouteLocationRaw } from 'vue-router';
import { type Position } from './types';
import { type Color } from './MazBtn.vue';
export type { Color, Position };
export type MenuItem = {
    label: string;
    action?: () => unknown;
    target?: string;
    href?: string;
    to?: RouteLocationRaw;
    class?: string;
} & Record<string, unknown>;
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<{
    style?: import("vue").StyleValue;
    class?: any;
    /** Menu items */
    items: MenuItem[];
    /** Menu should be open? */
    open?: boolean | undefined;
    /** id of the menu */
    id?: string | undefined;
    /** Should open the dropdown on click, hover or both */
    trigger?: "click" | "both" | "hover" | undefined;
    /** Button color */
    color?: Color | undefined;
    /** Position of the dropdown */
    position?: Position | undefined;
    /** Disable close menu on menuitem clicked */
    noCloseOnClick?: boolean | undefined;
    /** Disable menu */
    disabled?: boolean | undefined;
    /** Remove chevron icon in main button */
    noChevron?: boolean | undefined;
    /** Description read by screen reader (accessibility) */
    screenReaderDescription?: string | undefined;
}>, {
    class: undefined;
    style: undefined;
    id: string;
    trigger: string;
    color: string;
    position: string;
    screenReaderDescription: string;
}>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "menuitem-clicked": (...args: any[]) => void;
    "update:open": (...args: any[]) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<{
    style?: import("vue").StyleValue;
    class?: any;
    /** Menu items */
    items: MenuItem[];
    /** Menu should be open? */
    open?: boolean | undefined;
    /** id of the menu */
    id?: string | undefined;
    /** Should open the dropdown on click, hover or both */
    trigger?: "click" | "both" | "hover" | undefined;
    /** Button color */
    color?: Color | undefined;
    /** Position of the dropdown */
    position?: Position | undefined;
    /** Disable close menu on menuitem clicked */
    noCloseOnClick?: boolean | undefined;
    /** Disable menu */
    disabled?: boolean | undefined;
    /** Remove chevron icon in main button */
    noChevron?: boolean | undefined;
    /** Description read by screen reader (accessibility) */
    screenReaderDescription?: string | undefined;
}>, {
    class: undefined;
    style: undefined;
    id: string;
    trigger: string;
    color: string;
    position: string;
    screenReaderDescription: string;
}>>> & {
    "onMenuitem-clicked"?: ((...args: any[]) => any) | undefined;
    "onUpdate:open"?: ((...args: any[]) => any) | undefined;
}, {
    color: Color;
    style: string | false | import("vue").CSSProperties | import("vue").StyleValue[] | null;
    class: any;
    id: string;
    position: Position;
    trigger: "click" | "both" | "hover";
    screenReaderDescription: string;
}, {}>, {
    element?(_: {
        isOpen: boolean;
    }): any;
    default?(_: {}): any;
    menuitem?(_: {
        item: MenuItem;
    }): any;
    "menuitem-label"?(_: {
        item: MenuItem;
    }): any;
}>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
