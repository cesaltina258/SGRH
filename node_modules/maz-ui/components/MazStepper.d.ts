import { type PropType } from 'vue';
import type { Color } from './types';
export type { Color };
export interface Step {
    title?: string;
    subtitle?: string;
    titleInfo?: string;
    disabled?: boolean;
    error?: boolean;
    success?: boolean;
    warning?: boolean;
}
export type Steps = Step[];
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    modelValue: {
        type: NumberConstructor;
        default: undefined;
    };
    steps: {
        type: PropType<Steps>;
        default: undefined;
    };
    disabledNextSteps: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabledPreviousSteps: {
        type: BooleanConstructor;
        default: boolean;
    };
    autoValidateSteps: {
        type: BooleanConstructor;
        default: boolean;
    };
    allStepsOpened: {
        type: BooleanConstructor;
        default: boolean;
    };
    allStepsValidated: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: PropType<Color>;
        default: string;
    };
    canCloseSteps: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:model-value": (...args: any[]) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: NumberConstructor;
        default: undefined;
    };
    steps: {
        type: PropType<Steps>;
        default: undefined;
    };
    disabledNextSteps: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabledPreviousSteps: {
        type: BooleanConstructor;
        default: boolean;
    };
    autoValidateSteps: {
        type: BooleanConstructor;
        default: boolean;
    };
    allStepsOpened: {
        type: BooleanConstructor;
        default: boolean;
    };
    allStepsValidated: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: PropType<Color>;
        default: string;
    };
    canCloseSteps: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & {
    "onUpdate:model-value"?: ((...args: any[]) => any) | undefined;
}, {
    color: Color;
    modelValue: number;
    steps: Steps;
    disabledNextSteps: boolean;
    disabledPreviousSteps: boolean;
    autoValidateSteps: boolean;
    allStepsOpened: boolean;
    allStepsValidated: boolean;
    canCloseSteps: boolean;
}, {}>, Partial<Record<`title-${number}`, (_: {}) => any>> & Partial<Record<`subtitle-${number}`, (_: {}) => any>> & Partial<Record<`title-info-${number}`, (_: {}) => any>> & Partial<Record<`content-${number}`, (_: {
    validated: boolean;
    error: boolean | undefined;
    warning: boolean | undefined;
    nextStep: () => void;
    previousStep: () => void;
}) => any>>>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
