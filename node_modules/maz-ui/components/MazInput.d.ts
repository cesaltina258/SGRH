import { type PropType } from 'vue';
import type { Color, ModelValueSimple, Size } from './types';
export type { Color, Size, ModelValueSimple } from './types';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    style: {
        type: PropType<import("vue").StyleValue>;
        default: undefined;
    };
    class: {
        type: PropType<any>;
        default: undefined;
    };
    modelValue: {
        type: PropType<ModelValueSimple>;
        default: undefined;
    };
    placeholder: {
        type: StringConstructor;
        default: undefined;
    };
    color: {
        type: PropType<Color>;
        default: string;
    };
    label: {
        type: StringConstructor;
        default: undefined;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    type: {
        type: StringConstructor;
        default: string;
        validator: (value: string) => boolean;
    };
    required: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    id: {
        type: StringConstructor;
        default: undefined;
    };
    error: {
        type: BooleanConstructor;
        default: boolean;
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    warning: {
        type: BooleanConstructor;
        default: boolean;
    };
    hint: {
        type: StringConstructor;
        default: undefined;
    };
    inputClasses: {
        type: StringConstructor;
        default: undefined;
    };
    noBorder: {
        type: BooleanConstructor;
        default: boolean;
    };
    noRadius: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: PropType<Size>;
        default: string;
        validator: (value: string) => boolean;
    };
    debounce: {
        type: BooleanConstructor;
        default: boolean;
    };
    debounceDelay: {
        type: NumberConstructor;
        default: number;
    };
    validButton: {
        type: BooleanConstructor;
        default: boolean;
    };
    validButtonLoading: {
        type: BooleanConstructor;
        default: boolean;
    };
    autoFocus: {
        type: BooleanConstructor;
        default: boolean;
    };
    borderActive: {
        type: BooleanConstructor;
        default: boolean;
    };
    leftIcon: {
        type: StringConstructor;
        default: undefined;
    };
    rightIcon: {
        type: StringConstructor;
        default: undefined;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    click: (...args: any[]) => void;
    blur: (...args: any[]) => void;
    change: (...args: any[]) => void;
    focus: (...args: any[]) => void;
    update: (...args: any[]) => void;
    "update:model-value": (...args: any[]) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    style: {
        type: PropType<import("vue").StyleValue>;
        default: undefined;
    };
    class: {
        type: PropType<any>;
        default: undefined;
    };
    modelValue: {
        type: PropType<ModelValueSimple>;
        default: undefined;
    };
    placeholder: {
        type: StringConstructor;
        default: undefined;
    };
    color: {
        type: PropType<Color>;
        default: string;
    };
    label: {
        type: StringConstructor;
        default: undefined;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    type: {
        type: StringConstructor;
        default: string;
        validator: (value: string) => boolean;
    };
    required: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    id: {
        type: StringConstructor;
        default: undefined;
    };
    error: {
        type: BooleanConstructor;
        default: boolean;
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    warning: {
        type: BooleanConstructor;
        default: boolean;
    };
    hint: {
        type: StringConstructor;
        default: undefined;
    };
    inputClasses: {
        type: StringConstructor;
        default: undefined;
    };
    noBorder: {
        type: BooleanConstructor;
        default: boolean;
    };
    noRadius: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: PropType<Size>;
        default: string;
        validator: (value: string) => boolean;
    };
    debounce: {
        type: BooleanConstructor;
        default: boolean;
    };
    debounceDelay: {
        type: NumberConstructor;
        default: number;
    };
    validButton: {
        type: BooleanConstructor;
        default: boolean;
    };
    validButtonLoading: {
        type: BooleanConstructor;
        default: boolean;
    };
    autoFocus: {
        type: BooleanConstructor;
        default: boolean;
    };
    borderActive: {
        type: BooleanConstructor;
        default: boolean;
    };
    leftIcon: {
        type: StringConstructor;
        default: undefined;
    };
    rightIcon: {
        type: StringConstructor;
        default: undefined;
    };
}>> & {
    onFocus?: ((...args: any[]) => any) | undefined;
    onBlur?: ((...args: any[]) => any) | undefined;
    onChange?: ((...args: any[]) => any) | undefined;
    onClick?: ((...args: any[]) => any) | undefined;
    "onUpdate:model-value"?: ((...args: any[]) => any) | undefined;
    onUpdate?: ((...args: any[]) => any) | undefined;
}, {
    success: boolean;
    warning: boolean;
    size: Size;
    color: Color;
    type: string;
    label: string;
    style: import("vue").StyleValue;
    class: any;
    disabled: boolean;
    name: string;
    placeholder: string;
    required: boolean;
    id: string;
    error: boolean;
    leftIcon: string;
    rightIcon: string;
    modelValue: ModelValueSimple;
    noRadius: boolean;
    readonly: boolean;
    hint: string;
    inputClasses: string;
    noBorder: boolean;
    debounce: boolean;
    debounceDelay: number;
    validButton: boolean;
    validButtonLoading: boolean;
    autoFocus: boolean;
    borderActive: boolean;
}, {}>, {
    "left-icon"?(_: {}): any;
    "right-icon"?(_: {}): any;
    "valid-button"?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
