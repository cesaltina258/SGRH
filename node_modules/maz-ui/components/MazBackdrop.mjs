import "./assets/MazBackdrop.css";
import { defineComponent as v, ref as y, onMounted as C, watch as E, openBlock as u, createBlock as A, Teleport as B, createVNode as L, Transition as S, withCtx as g, createElementBlock as O, normalizeClass as p, createElementVNode as f, withModifiers as V, mergeProps as D, renderSlot as N, createCommentVNode as $ } from "vue";
const k = "--backdrop-present", M = () => {
  document.documentElement.classList.add(k);
}, P = async () => {
  document.querySelector(".m-backdrop.--present") || document.documentElement.classList.remove(k);
}, T = v({
  inheritAttrs: !1,
  props: {
    modelValue: { type: Boolean, default: !1 },
    teleportSelector: { type: String, default: "body" },
    beforeClose: {
      // eslint-disable-next-line @typescript-eslint/ban-types
      type: Function,
      default: void 0
    },
    persistent: { type: Boolean, default: !1 },
    noCloseOnEscKey: { type: Boolean, default: !1 },
    transitionName: { type: String, default: "backdrop-anim" },
    backdropClass: { type: [Array, String, Object], default: void 0 },
    backdropContentClass: {
      type: [Array, String, Object],
      default: void 0
    }
  },
  emits: ["open", "before-close", "close", "update:model-value"],
  setup(e, { emit: o }) {
    const t = y(e.modelValue), a = () => {
      s(!1);
    }, s = async (n) => {
      var m;
      n || (o("before-close"), await ((m = e.beforeClose) == null ? void 0 : m.call(e))), t.value = n;
    }, c = () => {
      o("open");
    }, r = () => {
      o("update:model-value", !1), o("close"), d();
    }, b = () => {
      e.persistent || a();
    }, l = (n) => {
      !e.noCloseOnEscKey && n.key === "Escape" && !e.persistent && a();
    }, i = () => {
      M(), document.addEventListener("keyup", l, !1);
    }, d = () => {
      document.removeEventListener("keyup", l), P();
    };
    return C(() => {
      e.modelValue ? i() : d();
    }), E(
      () => e.modelValue,
      (n) => {
        t.value = n, n ? i() : d();
      }
    ), {
      onBackdropAnimationEnter: c,
      onBackdropAnimationLeave: r,
      onBackdropClicked: b,
      close: a,
      present: t,
      toggleModal: s,
      onKeyPress: l
    };
  }
}), w = (e, o) => {
  const t = e.__vccOpts || e;
  for (const [a, s] of o)
    t[a] = s;
  return t;
};
function h(e, o, t, a, s, c) {
  return u(), A(B, { to: e.teleportSelector }, [
    L(S, {
      appear: "",
      name: e.transitionName,
      onAfterEnter: e.onBackdropAnimationEnter,
      onAfterLeave: e.onBackdropAnimationLeave
    }, {
      default: g(() => [
        e.present ? (u(), O(
          "div",
          {
            key: 0,
            class: p(["m-backdrop --present", [e.backdropClass]]),
            tabindex: "-1",
            role: "dialog"
          },
          [
            f(
              "button",
              {
                class: p(["m-backdrop-overlay", { "--disabled": e.persistent }]),
                tabindex: "-1",
                onClick: o[0] || (o[0] = V((...r) => e.onBackdropClicked && e.onBackdropClicked(...r), ["self"]))
              },
              null,
              2
              /* CLASS */
            ),
            f(
              "div",
              D({
                class: ["m-backdrop-content", e.backdropContentClass]
              }, e.$attrs, {
                role: "document",
                tabindex: "0"
              }),
              [
                N(e.$slots, "default", { close: e.close })
              ],
              16
              /* FULL_PROPS */
            )
          ],
          2
          /* CLASS */
        )) : $("v-if", !0)
      ]),
      _: 3
      /* FORWARDED */
    }, 8, ["name", "onAfterEnter", "onAfterLeave"])
  ], 8, ["to"]);
}
const z = /* @__PURE__ */ w(T, [["render", h]]);
export {
  z as default
};
