import { type PropType } from 'vue';
import type { MazGalleryImage } from './types';
export type { MazGalleryImage } from './types';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    /** Images displayed */
    images: {
        type: PropType<MazGalleryImage[]>;
        default: undefined;
    };
    /** Card variant: Must be `column | row | row-reverse | column-reverse` */
    orientation: {
        type: StringConstructor;
        default: string;
        validator: (value: string) => boolean;
    };
    /** Make card a link (footer area excluded) */
    href: {
        type: StringConstructor;
        default: undefined;
    };
    /** Target option of link: Muse be one of `_blank | _self | _parent | _top | framename` */
    hrefTarget: {
        type: StringConstructor;
        default: string;
    };
    /** Footer text alignment: `right | left` */
    footerAlign: {
        type: StringConstructor;
        default: string;
    };
    /** Gallery image width */
    galleryWidth: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    /** Gallery image height */
    galleryHeight: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    /** Enable "zoom" image on click (can't be used when the card has a link) */
    zoom: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Set elevation to card (box-shadow) */
    elevation: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Set radius to card (box-shadow) */
    radius: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Set border to card */
    bordered: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Number of images shown in the gallery */
    imagesShowCount: {
        type: NumberConstructor;
        default: number;
    };
    /** Remove transparent layer with the remain count (ex: +2) */
    noRemaining: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** scale animation on hover (only linked cards) */
    scale: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** add classes to wrapper */
    wrapperClass: {
        type: PropType<any>;
        default: undefined;
    };
    /** Remove padding from content wrapper */
    noPadding: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Hide overflow */
    overflowHidden: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Card can be open and close */
    collapsable: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Card is open by default if `true` */
    collapseOpen: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    /** Images displayed */
    images: {
        type: PropType<MazGalleryImage[]>;
        default: undefined;
    };
    /** Card variant: Must be `column | row | row-reverse | column-reverse` */
    orientation: {
        type: StringConstructor;
        default: string;
        validator: (value: string) => boolean;
    };
    /** Make card a link (footer area excluded) */
    href: {
        type: StringConstructor;
        default: undefined;
    };
    /** Target option of link: Muse be one of `_blank | _self | _parent | _top | framename` */
    hrefTarget: {
        type: StringConstructor;
        default: string;
    };
    /** Footer text alignment: `right | left` */
    footerAlign: {
        type: StringConstructor;
        default: string;
    };
    /** Gallery image width */
    galleryWidth: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    /** Gallery image height */
    galleryHeight: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    /** Enable "zoom" image on click (can't be used when the card has a link) */
    zoom: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Set elevation to card (box-shadow) */
    elevation: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Set radius to card (box-shadow) */
    radius: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Set border to card */
    bordered: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Number of images shown in the gallery */
    imagesShowCount: {
        type: NumberConstructor;
        default: number;
    };
    /** Remove transparent layer with the remain count (ex: +2) */
    noRemaining: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** scale animation on hover (only linked cards) */
    scale: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** add classes to wrapper */
    wrapperClass: {
        type: PropType<any>;
        default: undefined;
    };
    /** Remove padding from content wrapper */
    noPadding: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Hide overflow */
    overflowHidden: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Card can be open and close */
    collapsable: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Card is open by default if `true` */
    collapseOpen: {
        type: BooleanConstructor;
        default: boolean;
    };
}>>, {
    zoom: boolean;
    href: string;
    noPadding: boolean;
    bordered: boolean;
    images: MazGalleryImage[];
    noRemaining: boolean;
    scale: boolean;
    orientation: string;
    hrefTarget: string;
    footerAlign: string;
    galleryWidth: string | number;
    galleryHeight: string | number;
    elevation: boolean;
    radius: boolean;
    imagesShowCount: number;
    wrapperClass: any;
    overflowHidden: boolean;
    collapsable: boolean;
    collapseOpen: boolean;
}, {}>, {
    header?(_: {}): any;
    default?(_: {}): any;
    title?(_: {}): any;
    subtitle?(_: {}): any;
    content?(_: {}): any;
    footer?(_: {}): any;
    actions?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
