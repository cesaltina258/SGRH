import { type PropType } from 'vue';
declare const _default: import("vue").DefineComponent<{
    src: {
        type: StringConstructor;
        default: undefined;
    };
    path: {
        type: StringConstructor;
        default: undefined;
    };
    name: {
        type: StringConstructor;
        default: undefined;
    };
    size: {
        type: StringConstructor;
        default: undefined;
    };
    title: {
        type: StringConstructor;
        default: undefined;
    };
    transformSource: {
        type: PropType<(param: SVGElement) => SVGElement>;
        default: (svg: SVGElement) => SVGElement;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    error: (...args: any[]) => void;
    loaded: (...args: any[]) => void;
    unloaded: (...args: any[]) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    src: {
        type: StringConstructor;
        default: undefined;
    };
    path: {
        type: StringConstructor;
        default: undefined;
    };
    name: {
        type: StringConstructor;
        default: undefined;
    };
    size: {
        type: StringConstructor;
        default: undefined;
    };
    title: {
        type: StringConstructor;
        default: undefined;
    };
    transformSource: {
        type: PropType<(param: SVGElement) => SVGElement>;
        default: (svg: SVGElement) => SVGElement;
    };
}>> & {
    onError?: ((...args: any[]) => any) | undefined;
    onLoaded?: ((...args: any[]) => any) | undefined;
    onUnloaded?: ((...args: any[]) => any) | undefined;
}, {
    size: string;
    title: string;
    path: string;
    src: string;
    name: string;
    transformSource: (param: SVGElement) => SVGElement;
}, {}>;
export default _default;
