import { type PropType } from 'vue';
import type { Color } from './types';
export type { Color };
declare const _default: import("vue").DefineComponent<{
    style: {
        type: PropType<import("vue").StyleValue>;
        default: undefined;
    };
    class: {
        type: PropType<any>;
        default: undefined;
    };
    modelValue: {
        type: StringConstructor;
        default: undefined;
    };
    id: {
        type: StringConstructor;
        default: undefined;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    label: {
        type: StringConstructor;
        default: undefined;
    };
    required: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    error: {
        type: BooleanConstructor;
        default: boolean;
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    warning: {
        type: BooleanConstructor;
        default: boolean;
    };
    hint: {
        type: StringConstructor;
        default: undefined;
    };
    color: {
        type: PropType<Color>;
        default: string;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    input: (...args: any[]) => void;
    blur: (...args: any[]) => void;
    change: (...args: any[]) => void;
    focus: (...args: any[]) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    style: {
        type: PropType<import("vue").StyleValue>;
        default: undefined;
    };
    class: {
        type: PropType<any>;
        default: undefined;
    };
    modelValue: {
        type: StringConstructor;
        default: undefined;
    };
    id: {
        type: StringConstructor;
        default: undefined;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    label: {
        type: StringConstructor;
        default: undefined;
    };
    required: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    error: {
        type: BooleanConstructor;
        default: boolean;
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    warning: {
        type: BooleanConstructor;
        default: boolean;
    };
    hint: {
        type: StringConstructor;
        default: undefined;
    };
    color: {
        type: PropType<Color>;
        default: string;
    };
}>> & {
    onFocus?: ((...args: any[]) => any) | undefined;
    onBlur?: ((...args: any[]) => any) | undefined;
    onChange?: ((...args: any[]) => any) | undefined;
    onInput?: ((...args: any[]) => any) | undefined;
}, {
    success: boolean;
    warning: boolean;
    color: Color;
    label: string;
    style: import("vue").StyleValue;
    class: any;
    disabled: boolean;
    name: string;
    required: boolean;
    id: string;
    error: boolean;
    modelValue: string;
    readonly: boolean;
    hint: string;
}, {}>;
export default _default;
