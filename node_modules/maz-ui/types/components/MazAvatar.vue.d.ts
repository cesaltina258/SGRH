import { type PropType } from 'vue';
import type { Color } from './types';
export type { Color };
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    src: {
        type: PropType<string | null | undefined>;
        default: undefined;
    };
    caption: {
        type: PropType<string | null | undefined>;
        default: undefined;
    };
    href: {
        type: StringConstructor;
        default: undefined;
    };
    to: {
        type: ObjectConstructor;
        default: undefined;
    };
    alt: {
        type: StringConstructor;
        default: string;
    };
    target: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: StringConstructor;
        default: undefined;
    };
    bordered: {
        type: BooleanConstructor;
        default: boolean;
    };
    clickable: {
        type: BooleanConstructor;
        default: boolean;
    };
    square: {
        type: BooleanConstructor;
        default: boolean;
    };
    noElevation: {
        type: BooleanConstructor;
        default: boolean;
    };
    showCaption: {
        type: BooleanConstructor;
        default: boolean;
    };
    imageHeightFull: {
        type: BooleanConstructor;
        default: boolean;
    };
    noLoader: {
        type: BooleanConstructor;
        default: boolean;
    };
    buttonColor: {
        type: PropType<Color>;
        default: string;
    };
    /** Remove the icon on hover when component is clickable */
    noClickableIcon: {
        type: BooleanConstructor;
        default: boolean;
    };
    letterCount: {
        type: NumberConstructor;
        default: undefined;
    };
    roundedSize: {
        type: PropType<"sm" | "md" | "lg" | "xl" | "none" | "full">;
        default: string;
        validator: (value: string) => boolean;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    click: (...args: any[]) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    src: {
        type: PropType<string | null | undefined>;
        default: undefined;
    };
    caption: {
        type: PropType<string | null | undefined>;
        default: undefined;
    };
    href: {
        type: StringConstructor;
        default: undefined;
    };
    to: {
        type: ObjectConstructor;
        default: undefined;
    };
    alt: {
        type: StringConstructor;
        default: string;
    };
    target: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: StringConstructor;
        default: undefined;
    };
    bordered: {
        type: BooleanConstructor;
        default: boolean;
    };
    clickable: {
        type: BooleanConstructor;
        default: boolean;
    };
    square: {
        type: BooleanConstructor;
        default: boolean;
    };
    noElevation: {
        type: BooleanConstructor;
        default: boolean;
    };
    showCaption: {
        type: BooleanConstructor;
        default: boolean;
    };
    imageHeightFull: {
        type: BooleanConstructor;
        default: boolean;
    };
    noLoader: {
        type: BooleanConstructor;
        default: boolean;
    };
    buttonColor: {
        type: PropType<Color>;
        default: string;
    };
    /** Remove the icon on hover when component is clickable */
    noClickableIcon: {
        type: BooleanConstructor;
        default: boolean;
    };
    letterCount: {
        type: NumberConstructor;
        default: undefined;
    };
    roundedSize: {
        type: PropType<"sm" | "md" | "lg" | "xl" | "none" | "full">;
        default: string;
        validator: (value: string) => boolean;
    };
}>> & {
    onClick?: ((...args: any[]) => any) | undefined;
}, {
    size: string;
    caption: string | null | undefined;
    src: string | null | undefined;
    alt: string;
    target: string;
    href: string;
    to: Record<string, any>;
    noElevation: boolean;
    noLoader: boolean;
    imageHeightFull: boolean;
    bordered: boolean;
    clickable: boolean;
    square: boolean;
    showCaption: boolean;
    buttonColor: Color;
    noClickableIcon: boolean;
    letterCount: number;
    roundedSize: "sm" | "md" | "lg" | "xl" | "none" | "full";
}, {}>, {
    "round-text"?(_: {}): any;
    icon?(_: {}): any;
    caption?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
