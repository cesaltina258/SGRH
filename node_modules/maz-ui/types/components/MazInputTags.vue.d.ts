import { type PropType } from 'vue';
import type { Color, Size } from './types';
export type { Color, Size };
declare const _default: import("vue").DefineComponent<{
    style: {
        type: PropType<import("vue").StyleValue>;
        default: undefined;
    };
    class: {
        type: PropType<any>;
        default: undefined;
    };
    /** Input value, can be a `Array` of `String` or `null` */
    modelValue: {
        type: PropType<string[] | number[]>;
        default: undefined;
    };
    /** input placeholder */
    placeholder: {
        type: StringConstructor;
        default: undefined;
    };
    label: {
        type: StringConstructor;
        default: undefined;
    };
    /** When is `true` the input is disable */
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** When is `true` the input has the error style (danger color) */
    error: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** When is `true` the input has the success style (success color) */
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** When is `true` the input has the warning style (warning color) */
    warning: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: PropType<Size>;
        default: string;
        validator: (value: string) => boolean;
    };
    /** Color of component */
    color: {
        type: PropType<Color>;
        default: string;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:model-value": (...args: any[]) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    style: {
        type: PropType<import("vue").StyleValue>;
        default: undefined;
    };
    class: {
        type: PropType<any>;
        default: undefined;
    };
    /** Input value, can be a `Array` of `String` or `null` */
    modelValue: {
        type: PropType<string[] | number[]>;
        default: undefined;
    };
    /** input placeholder */
    placeholder: {
        type: StringConstructor;
        default: undefined;
    };
    label: {
        type: StringConstructor;
        default: undefined;
    };
    /** When is `true` the input is disable */
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** When is `true` the input has the error style (danger color) */
    error: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** When is `true` the input has the success style (success color) */
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** When is `true` the input has the warning style (warning color) */
    warning: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: PropType<Size>;
        default: string;
        validator: (value: string) => boolean;
    };
    /** Color of component */
    color: {
        type: PropType<Color>;
        default: string;
    };
}>> & {
    "onUpdate:model-value"?: ((...args: any[]) => any) | undefined;
}, {
    success: boolean;
    warning: boolean;
    size: Size;
    color: Color;
    label: string;
    style: import("vue").StyleValue;
    class: any;
    disabled: boolean;
    placeholder: string;
    error: boolean;
    modelValue: string[] | number[];
}, {}>;
export default _default;
