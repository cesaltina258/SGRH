import { type PropType } from 'vue';
import type { ToasterPosition, ToasterAction, ToasterLink } from './types';
declare const _default: import("vue").DefineComponent<{
    position: {
        type: PropType<ToasterPosition>;
        default: string;
    };
    maxToasts: {
        type: (BooleanConstructor | NumberConstructor)[];
        default: boolean;
    };
    timeout: {
        type: NumberConstructor;
        default: number;
    };
    queue: {
        type: BooleanConstructor;
        default: boolean;
    };
    noPauseOnHover: {
        type: BooleanConstructor;
        default: boolean;
    };
    type: {
        type: PropType<"info" | "success" | "warning" | "danger" | "theme">;
        default: string;
    };
    message: {
        type: StringConstructor;
        required: true;
    };
    link: {
        type: PropType<ToasterLink>;
        default: undefined;
    };
    action: {
        type: PropType<ToasterAction>;
        default: undefined;
    };
    persistent: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    close: (...args: any[]) => void;
    click: (...args: any[]) => void;
    open: (...args: any[]) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    position: {
        type: PropType<ToasterPosition>;
        default: string;
    };
    maxToasts: {
        type: (BooleanConstructor | NumberConstructor)[];
        default: boolean;
    };
    timeout: {
        type: NumberConstructor;
        default: number;
    };
    queue: {
        type: BooleanConstructor;
        default: boolean;
    };
    noPauseOnHover: {
        type: BooleanConstructor;
        default: boolean;
    };
    type: {
        type: PropType<"info" | "success" | "warning" | "danger" | "theme">;
        default: string;
    };
    message: {
        type: StringConstructor;
        required: true;
    };
    link: {
        type: PropType<ToasterLink>;
        default: undefined;
    };
    action: {
        type: PropType<ToasterAction>;
        default: undefined;
    };
    persistent: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & {
    onClick?: ((...args: any[]) => any) | undefined;
    onClose?: ((...args: any[]) => any) | undefined;
    onOpen?: ((...args: any[]) => any) | undefined;
}, {
    type: "info" | "success" | "warning" | "danger" | "theme";
    link: ToasterLink;
    timeout: number;
    position: ToasterPosition;
    persistent: boolean;
    action: ToasterAction;
    maxToasts: number | boolean;
    queue: boolean;
    noPauseOnHover: boolean;
}, {}>;
export default _default;
